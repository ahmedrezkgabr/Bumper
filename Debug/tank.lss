
tank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000025b2  00002646  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000a8  008000a8  0000268e  2**0
                  ALLOC
  3 .stab         0000192c  00000000  00000000  00002690  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d28  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008878  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000089d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <main>
      8a:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ea       	ldi	r26, 0xA0	; 160
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ea       	ldi	r24, 0xA0	; 160
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_vidinit>:
   #include"ADC_interface.h"
 //  #include"GIE_interface.h"

   void (* func)(void)=NULL;
   void ADC_vidinit()
   {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

   	/*SELECT REF*/


   	SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
   	CLEAR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

   	/*ACTIVATE ADIJUST*/
       #if ADJUST_RESULT  ==   LEFT_ADJUST_RESULT
   	   SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
           #warning("wrong adjust!")

      #endif
   	   /*select 128 prescaler*/
      #if ADC_PRESCALAR ==  128
   	    SET_BIT(ADCSRA,ADCSRA_ADPS0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8c 93       	st	X, r24
   	   	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
   	   	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24
       /*interrupt enable*/
      #if   INTERRUPT  ==  ENABLE
   	    SET_BIT(ADCSRA,ADCSRA_ADIE);
      #endif
   	/*ENABLE MODULE*/
   	SET_BIT(ADCSRA,ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24

   }
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8readchannel_synchronous>:

   u8 ADC_u8readchannel_synchronous(u8 copy_u8channel)
   {
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
   	/*choose channel*/
     //f32 volt;
   	ADMUX = ADMUX & 0b11100000 ;  /*clear firt five bits*/
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	80 7e       	andi	r24, 0xE0	; 224
     bce:	8c 93       	st	X, r24
   	ADMUX = ADMUX | copy_u8channel;  /*put value in five bits*/
     bd0:	a7 e2       	ldi	r26, 0x27	; 39
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e7 e2       	ldi	r30, 0x27	; 39
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	90 81       	ld	r25, Z
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	89 2b       	or	r24, r25
     bde:	8c 93       	st	X, r24

   	/*start conversion*/
   	SET_BIT(ADCSRA,ADCSRA_ADSC);
     be0:	a6 e2       	ldi	r26, 0x26	; 38
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e6 e2       	ldi	r30, 0x26	; 38
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 64       	ori	r24, 0x40	; 64
     bec:	8c 93       	st	X, r24

   	/*WAIT FLAG*/
   	while( !GIT_BIT(ADCSRA,ADCSRA_ADIF));
     bee:	e6 e2       	ldi	r30, 0x26	; 38
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	82 95       	swap	r24
     bf6:	8f 70       	andi	r24, 0x0F	; 15
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	81 70       	andi	r24, 0x01	; 1
     bfe:	90 70       	andi	r25, 0x00	; 0
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	a9 f3       	breq	.-22     	; 0xbee <ADC_u8readchannel_synchronous+0x38>

       #if   INTERRUPT  ==  DISABLE
   	   /*clear flag*/
   	   SET_BIT(ADCSRA,ADCSRA_ADIF);
     c04:	a6 e2       	ldi	r26, 0x26	; 38
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 61       	ori	r24, 0x10	; 16
     c10:	8c 93       	st	X, r24
      #endif
   	   /*volt=(ADCH*5.0)/(255.0);*/
   	return ADCH;
     c12:	e5 e2       	ldi	r30, 0x25	; 37
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z

   }
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <callback_func>:
   void callback_func(void(* callback)(void))
   {
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	00 d0       	rcall	.+0      	; 0xc26 <callback_func+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
   	if(callback !=NULL)
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	31 f0       	breq	.+12     	; 0xc42 <callback_func+0x22>
   	{
   		func=callback;
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	90 93 a9 00 	sts	0x00A9, r25
     c3e:	80 93 a8 00 	sts	0x00A8, r24
   	}
   }
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <__vector_16__>:

   void __vector_16__(void)__attribute__((signal));
   void __vector_16__(void)
   {
     c4c:	1f 92       	push	r1
     c4e:	0f 92       	push	r0
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	2f 93       	push	r18
     c58:	3f 93       	push	r19
     c5a:	4f 93       	push	r20
     c5c:	5f 93       	push	r21
     c5e:	6f 93       	push	r22
     c60:	7f 93       	push	r23
     c62:	8f 93       	push	r24
     c64:	9f 93       	push	r25
     c66:	af 93       	push	r26
     c68:	bf 93       	push	r27
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62

   	if(func !=NULL)
     c76:	80 91 a8 00 	lds	r24, 0x00A8
     c7a:	90 91 a9 00 	lds	r25, 0x00A9
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	29 f0       	breq	.+10     	; 0xc8c <__vector_16__+0x40>
   	{
   		func();
     c82:	e0 91 a8 00 	lds	r30, 0x00A8
     c86:	f0 91 a9 00 	lds	r31, 0x00A9
     c8a:	09 95       	icall
   	}
   }
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <DIO_vidsetpinvalue>:
#include"liberary/BIT_MATH.h"
#include"DIO-private.h"
#include"DIO-interface.h"
/*set pin*/
void DIO_vidsetpinvalue(u8 copy_u8port,u8 copy_u8pinvalue,u8 copy_u8pinnumber)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	27 97       	sbiw	r28, 0x07	; 7
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	6a 83       	std	Y+2, r22	; 0x02
     cca:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8pinvalue==high)
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <DIO_vidsetpinvalue+0x22>
     cd2:	70 c0       	rjmp	.+224    	; 0xdb4 <DIO_vidsetpinvalue+0x102>
	{
		switch(copy_u8port)
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	3f 83       	std	Y+7, r19	; 0x07
     cdc:	2e 83       	std	Y+6, r18	; 0x06
     cde:	8e 81       	ldd	r24, Y+6	; 0x06
     ce0:	9f 81       	ldd	r25, Y+7	; 0x07
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	91 05       	cpc	r25, r1
     ce6:	51 f1       	breq	.+84     	; 0xd3c <DIO_vidsetpinvalue+0x8a>
     ce8:	2e 81       	ldd	r18, Y+6	; 0x06
     cea:	3f 81       	ldd	r19, Y+7	; 0x07
     cec:	24 30       	cpi	r18, 0x04	; 4
     cee:	31 05       	cpc	r19, r1
     cf0:	34 f4       	brge	.+12     	; 0xcfe <DIO_vidsetpinvalue+0x4c>
     cf2:	8e 81       	ldd	r24, Y+6	; 0x06
     cf4:	9f 81       	ldd	r25, Y+7	; 0x07
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	91 05       	cpc	r25, r1
     cfa:	61 f0       	breq	.+24     	; 0xd14 <DIO_vidsetpinvalue+0x62>
     cfc:	d3 c0       	rjmp	.+422    	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
     cfe:	2e 81       	ldd	r18, Y+6	; 0x06
     d00:	3f 81       	ldd	r19, Y+7	; 0x07
     d02:	24 30       	cpi	r18, 0x04	; 4
     d04:	31 05       	cpc	r19, r1
     d06:	71 f1       	breq	.+92     	; 0xd64 <DIO_vidsetpinvalue+0xb2>
     d08:	8e 81       	ldd	r24, Y+6	; 0x06
     d0a:	9f 81       	ldd	r25, Y+7	; 0x07
     d0c:	85 30       	cpi	r24, 0x05	; 5
     d0e:	91 05       	cpc	r25, r1
     d10:	e9 f1       	breq	.+122    	; 0xd8c <DIO_vidsetpinvalue+0xda>
     d12:	c8 c0       	rjmp	.+400    	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
		{
		  case port_A: SET_BIT(PORTA,copy_u8pinnumber);  break;
     d14:	ab e3       	ldi	r26, 0x3B	; 59
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	eb e3       	ldi	r30, 0x3B	; 59
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 2e       	mov	r0, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_vidsetpinvalue+0x80>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_vidsetpinvalue+0x7c>
     d36:	84 2b       	or	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	b4 c0       	rjmp	.+360    	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
		  case port_B: SET_BIT(PORTB,copy_u8pinnumber);  break;
     d3c:	a8 e3       	ldi	r26, 0x38	; 56
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e8 e3       	ldi	r30, 0x38	; 56
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_vidsetpinvalue+0xa8>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_vidsetpinvalue+0xa4>
     d5e:	84 2b       	or	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	a0 c0       	rjmp	.+320    	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
		  case port_C: SET_BIT(PORTC,copy_u8pinnumber);  break;
     d64:	a5 e3       	ldi	r26, 0x35	; 53
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e5 e3       	ldi	r30, 0x35	; 53
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_vidsetpinvalue+0xd0>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_vidsetpinvalue+0xcc>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	8c c0       	rjmp	.+280    	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
		  case port_D: SET_BIT(PORTD,copy_u8pinnumber);  break;
     d8c:	a2 e3       	ldi	r26, 0x32	; 50
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e2 e3       	ldi	r30, 0x32	; 50
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_vidsetpinvalue+0xf8>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_vidsetpinvalue+0xf4>
     dae:	84 2b       	or	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	78 c0       	rjmp	.+240    	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
		}
	}
	else if(copy_u8pinvalue==low)
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	88 23       	and	r24, r24
     db8:	09 f0       	breq	.+2      	; 0xdbc <DIO_vidsetpinvalue+0x10a>
     dba:	74 c0       	rjmp	.+232    	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
	{
		switch(copy_u8port)
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3d 83       	std	Y+5, r19	; 0x05
     dc4:	2c 83       	std	Y+4, r18	; 0x04
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	91 05       	cpc	r25, r1
     dce:	61 f1       	breq	.+88     	; 0xe28 <DIO_vidsetpinvalue+0x176>
     dd0:	2c 81       	ldd	r18, Y+4	; 0x04
     dd2:	3d 81       	ldd	r19, Y+5	; 0x05
     dd4:	24 30       	cpi	r18, 0x04	; 4
     dd6:	31 05       	cpc	r19, r1
     dd8:	34 f4       	brge	.+12     	; 0xde6 <DIO_vidsetpinvalue+0x134>
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	9d 81       	ldd	r25, Y+5	; 0x05
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	91 05       	cpc	r25, r1
     de2:	69 f0       	breq	.+26     	; 0xdfe <DIO_vidsetpinvalue+0x14c>
     de4:	5f c0       	rjmp	.+190    	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
     de6:	2c 81       	ldd	r18, Y+4	; 0x04
     de8:	3d 81       	ldd	r19, Y+5	; 0x05
     dea:	24 30       	cpi	r18, 0x04	; 4
     dec:	31 05       	cpc	r19, r1
     dee:	89 f1       	breq	.+98     	; 0xe52 <DIO_vidsetpinvalue+0x1a0>
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	85 30       	cpi	r24, 0x05	; 5
     df6:	91 05       	cpc	r25, r1
     df8:	09 f4       	brne	.+2      	; 0xdfc <DIO_vidsetpinvalue+0x14a>
     dfa:	40 c0       	rjmp	.+128    	; 0xe7c <DIO_vidsetpinvalue+0x1ca>
     dfc:	53 c0       	rjmp	.+166    	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
		{
		  case port_A: CLEAR_BIT(PORTA,copy_u8pinnumber);  break;
     dfe:	ab e3       	ldi	r26, 0x3B	; 59
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	eb e3       	ldi	r30, 0x3B	; 59
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_vidsetpinvalue+0x16a>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_vidsetpinvalue+0x166>
     e20:	80 95       	com	r24
     e22:	84 23       	and	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	3e c0       	rjmp	.+124    	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
		  case port_B: CLEAR_BIT(PORTB,copy_u8pinnumber);  break;
     e28:	a8 e3       	ldi	r26, 0x38	; 56
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e8 e3       	ldi	r30, 0x38	; 56
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_vidsetpinvalue+0x194>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_vidsetpinvalue+0x190>
     e4a:	80 95       	com	r24
     e4c:	84 23       	and	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	29 c0       	rjmp	.+82     	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
		  case port_C: CLEAR_BIT(PORTC,copy_u8pinnumber);  break;
     e52:	a5 e3       	ldi	r26, 0x35	; 53
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_vidsetpinvalue+0x1be>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_vidsetpinvalue+0x1ba>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	14 c0       	rjmp	.+40     	; 0xea4 <DIO_vidsetpinvalue+0x1f2>
		  case port_D: CLEAR_BIT(PORTD,copy_u8pinnumber);  break;
     e7c:	a2 e3       	ldi	r26, 0x32	; 50
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e2 e3       	ldi	r30, 0x32	; 50
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_vidsetpinvalue+0x1e8>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_vidsetpinvalue+0x1e4>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
		}
	}
}
     ea4:	27 96       	adiw	r28, 0x07	; 7
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <DIO_vidsetpindirection>:
void DIO_vidsetpindirection(u8 copy_u8port,u8 copy_u8pinnumber,u8 copy_u8pindirection)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	27 97       	sbiw	r28, 0x07	; 7
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	6a 83       	std	Y+2, r22	; 0x02
     ece:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8pindirection==input)
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	88 23       	and	r24, r24
     ed4:	09 f0       	breq	.+2      	; 0xed8 <DIO_vidsetpindirection+0x22>
     ed6:	75 c0       	rjmp	.+234    	; 0xfc2 <DIO_vidsetpindirection+0x10c>
	{
		/*set pin as input*/
		switch(copy_u8port)
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3f 83       	std	Y+7, r19	; 0x07
     ee0:	2e 83       	std	Y+6, r18	; 0x06
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	9f 81       	ldd	r25, Y+7	; 0x07
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 05       	cpc	r25, r1
     eea:	61 f1       	breq	.+88     	; 0xf44 <DIO_vidsetpindirection+0x8e>
     eec:	2e 81       	ldd	r18, Y+6	; 0x06
     eee:	3f 81       	ldd	r19, Y+7	; 0x07
     ef0:	24 30       	cpi	r18, 0x04	; 4
     ef2:	31 05       	cpc	r19, r1
     ef4:	34 f4       	brge	.+12     	; 0xf02 <DIO_vidsetpindirection+0x4c>
     ef6:	8e 81       	ldd	r24, Y+6	; 0x06
     ef8:	9f 81       	ldd	r25, Y+7	; 0x07
     efa:	82 30       	cpi	r24, 0x02	; 2
     efc:	91 05       	cpc	r25, r1
     efe:	69 f0       	breq	.+26     	; 0xf1a <DIO_vidsetpindirection+0x64>
     f00:	d3 c0       	rjmp	.+422    	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
     f02:	2e 81       	ldd	r18, Y+6	; 0x06
     f04:	3f 81       	ldd	r19, Y+7	; 0x07
     f06:	24 30       	cpi	r18, 0x04	; 4
     f08:	31 05       	cpc	r19, r1
     f0a:	89 f1       	breq	.+98     	; 0xf6e <DIO_vidsetpindirection+0xb8>
     f0c:	8e 81       	ldd	r24, Y+6	; 0x06
     f0e:	9f 81       	ldd	r25, Y+7	; 0x07
     f10:	85 30       	cpi	r24, 0x05	; 5
     f12:	91 05       	cpc	r25, r1
     f14:	09 f4       	brne	.+2      	; 0xf18 <DIO_vidsetpindirection+0x62>
     f16:	40 c0       	rjmp	.+128    	; 0xf98 <DIO_vidsetpindirection+0xe2>
     f18:	c7 c0       	rjmp	.+398    	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
		{
		  case port_A: CLEAR_BIT(DDRA,copy_u8pinnumber);  break;
     f1a:	aa e3       	ldi	r26, 0x3A	; 58
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ea e3       	ldi	r30, 0x3A	; 58
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_vidsetpindirection+0x82>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <DIO_vidsetpindirection+0x7e>
     f3c:	80 95       	com	r24
     f3e:	84 23       	and	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	b2 c0       	rjmp	.+356    	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
		  case port_B: CLEAR_BIT(DDRB,copy_u8pinnumber);  break;
     f44:	a7 e3       	ldi	r26, 0x37	; 55
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e7 e3       	ldi	r30, 0x37	; 55
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_vidsetpindirection+0xac>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_vidsetpindirection+0xa8>
     f66:	80 95       	com	r24
     f68:	84 23       	and	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	9d c0       	rjmp	.+314    	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
		  case port_C: CLEAR_BIT(DDRC,copy_u8pinnumber);  break;
     f6e:	a4 e3       	ldi	r26, 0x34	; 52
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e4 e3       	ldi	r30, 0x34	; 52
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_vidsetpindirection+0xd6>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_vidsetpindirection+0xd2>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	88 c0       	rjmp	.+272    	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
		  case port_D: CLEAR_BIT(DDRD,copy_u8pinnumber);  break;
     f98:	a1 e3       	ldi	r26, 0x31	; 49
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e1 e3       	ldi	r30, 0x31	; 49
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_vidsetpindirection+0x100>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_vidsetpindirection+0xfc>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	73 c0       	rjmp	.+230    	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
		}
	}
	else if(copy_u8pindirection==output)
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	09 f0       	breq	.+2      	; 0xfca <DIO_vidsetpindirection+0x114>
     fc8:	6f c0       	rjmp	.+222    	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
	{
		/*set pin as output*/
		switch(copy_u8port)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	3d 83       	std	Y+5, r19	; 0x05
     fd2:	2c 83       	std	Y+4, r18	; 0x04
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	91 05       	cpc	r25, r1
     fdc:	51 f1       	breq	.+84     	; 0x1032 <DIO_vidsetpindirection+0x17c>
     fde:	2c 81       	ldd	r18, Y+4	; 0x04
     fe0:	3d 81       	ldd	r19, Y+5	; 0x05
     fe2:	24 30       	cpi	r18, 0x04	; 4
     fe4:	31 05       	cpc	r19, r1
     fe6:	34 f4       	brge	.+12     	; 0xff4 <DIO_vidsetpindirection+0x13e>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	82 30       	cpi	r24, 0x02	; 2
     fee:	91 05       	cpc	r25, r1
     ff0:	61 f0       	breq	.+24     	; 0x100a <DIO_vidsetpindirection+0x154>
     ff2:	5a c0       	rjmp	.+180    	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
     ff4:	2c 81       	ldd	r18, Y+4	; 0x04
     ff6:	3d 81       	ldd	r19, Y+5	; 0x05
     ff8:	24 30       	cpi	r18, 0x04	; 4
     ffa:	31 05       	cpc	r19, r1
     ffc:	71 f1       	breq	.+92     	; 0x105a <DIO_vidsetpindirection+0x1a4>
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	9d 81       	ldd	r25, Y+5	; 0x05
    1002:	85 30       	cpi	r24, 0x05	; 5
    1004:	91 05       	cpc	r25, r1
    1006:	e9 f1       	breq	.+122    	; 0x1082 <DIO_vidsetpindirection+0x1cc>
    1008:	4f c0       	rjmp	.+158    	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
		{
		  case port_A: SET_BIT(DDRA,copy_u8pinnumber);  break;
    100a:	aa e3       	ldi	r26, 0x3A	; 58
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ea e3       	ldi	r30, 0x3A	; 58
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_vidsetpindirection+0x172>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_vidsetpindirection+0x16e>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	3b c0       	rjmp	.+118    	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
		  case port_B: SET_BIT(DDRB,copy_u8pinnumber);  break;
    1032:	a7 e3       	ldi	r26, 0x37	; 55
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e7 e3       	ldi	r30, 0x37	; 55
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_vidsetpindirection+0x19a>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_vidsetpindirection+0x196>
    1054:	84 2b       	or	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	27 c0       	rjmp	.+78     	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
		  case port_C: SET_BIT(DDRC,copy_u8pinnumber);  break;
    105a:	a4 e3       	ldi	r26, 0x34	; 52
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e4 e3       	ldi	r30, 0x34	; 52
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_vidsetpindirection+0x1c2>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_vidsetpindirection+0x1be>
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	13 c0       	rjmp	.+38     	; 0x10a8 <DIO_vidsetpindirection+0x1f2>
		  case port_D: SET_BIT(DDRD,copy_u8pinnumber);  break;
    1082:	a1 e3       	ldi	r26, 0x31	; 49
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e1 e3       	ldi	r30, 0x31	; 49
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_vidsetpindirection+0x1ea>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_vidsetpindirection+0x1e6>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
		}
	}
}
    10a8:	27 96       	adiw	r28, 0x07	; 7
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <DIO_vidgetpinvalue>:
void DIO_vidgetpinvalue(u8 copy_u8port,u8 copy_u8pinnumber,u8 *copy_pu8pinvalue)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <DIO_vidgetpinvalue+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <DIO_vidgetpinvalue+0x8>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <DIO_vidgetpinvalue+0xa>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	6a 83       	std	Y+2, r22	; 0x02
    10cc:	5c 83       	std	Y+4, r21	; 0x04
    10ce:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8port)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	3e 83       	std	Y+6, r19	; 0x06
    10d8:	2d 83       	std	Y+5, r18	; 0x05
    10da:	4d 81       	ldd	r20, Y+5	; 0x05
    10dc:	5e 81       	ldd	r21, Y+6	; 0x06
    10de:	43 30       	cpi	r20, 0x03	; 3
    10e0:	51 05       	cpc	r21, r1
    10e2:	59 f1       	breq	.+86     	; 0x113a <DIO_vidgetpinvalue+0x80>
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	91 05       	cpc	r25, r1
    10ec:	34 f4       	brge	.+12     	; 0x10fa <DIO_vidgetpinvalue+0x40>
    10ee:	2d 81       	ldd	r18, Y+5	; 0x05
    10f0:	3e 81       	ldd	r19, Y+6	; 0x06
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	69 f0       	breq	.+26     	; 0x1112 <DIO_vidgetpinvalue+0x58>
    10f8:	5b c0       	rjmp	.+182    	; 0x11b0 <DIO_vidgetpinvalue+0xf6>
    10fa:	4d 81       	ldd	r20, Y+5	; 0x05
    10fc:	5e 81       	ldd	r21, Y+6	; 0x06
    10fe:	44 30       	cpi	r20, 0x04	; 4
    1100:	51 05       	cpc	r21, r1
    1102:	79 f1       	breq	.+94     	; 0x1162 <DIO_vidgetpinvalue+0xa8>
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	85 30       	cpi	r24, 0x05	; 5
    110a:	91 05       	cpc	r25, r1
    110c:	09 f4       	brne	.+2      	; 0x1110 <DIO_vidgetpinvalue+0x56>
    110e:	3d c0       	rjmp	.+122    	; 0x118a <DIO_vidgetpinvalue+0xd0>
    1110:	4f c0       	rjmp	.+158    	; 0x11b0 <DIO_vidgetpinvalue+0xf6>
	{
	  case port_A: *copy_pu8pinvalue=GIT_BIT(PINA,copy_u8pinnumber);  break;
    1112:	e9 e3       	ldi	r30, 0x39	; 57
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_vidgetpinvalue+0x70>
    1126:	55 95       	asr	r21
    1128:	47 95       	ror	r20
    112a:	8a 95       	dec	r24
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_vidgetpinvalue+0x6c>
    112e:	ca 01       	movw	r24, r20
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	eb 81       	ldd	r30, Y+3	; 0x03
    1134:	fc 81       	ldd	r31, Y+4	; 0x04
    1136:	80 83       	st	Z, r24
    1138:	3b c0       	rjmp	.+118    	; 0x11b0 <DIO_vidgetpinvalue+0xf6>
	  case port_B: *copy_pu8pinvalue=GIT_BIT(PINB,copy_u8pinnumber);  break;
    113a:	e6 e3       	ldi	r30, 0x36	; 54
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a9 01       	movw	r20, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_vidgetpinvalue+0x98>
    114e:	55 95       	asr	r21
    1150:	47 95       	ror	r20
    1152:	8a 95       	dec	r24
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_vidgetpinvalue+0x94>
    1156:	ca 01       	movw	r24, r20
    1158:	81 70       	andi	r24, 0x01	; 1
    115a:	eb 81       	ldd	r30, Y+3	; 0x03
    115c:	fc 81       	ldd	r31, Y+4	; 0x04
    115e:	80 83       	st	Z, r24
    1160:	27 c0       	rjmp	.+78     	; 0x11b0 <DIO_vidgetpinvalue+0xf6>
	  case port_C: *copy_pu8pinvalue=GIT_BIT(PINC,copy_u8pinnumber);  break;
    1162:	e3 e3       	ldi	r30, 0x33	; 51
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a9 01       	movw	r20, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_vidgetpinvalue+0xc0>
    1176:	55 95       	asr	r21
    1178:	47 95       	ror	r20
    117a:	8a 95       	dec	r24
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_vidgetpinvalue+0xbc>
    117e:	ca 01       	movw	r24, r20
    1180:	81 70       	andi	r24, 0x01	; 1
    1182:	eb 81       	ldd	r30, Y+3	; 0x03
    1184:	fc 81       	ldd	r31, Y+4	; 0x04
    1186:	80 83       	st	Z, r24
    1188:	13 c0       	rjmp	.+38     	; 0x11b0 <DIO_vidgetpinvalue+0xf6>
	  case port_D: *copy_pu8pinvalue=GIT_BIT(PIND,copy_u8pinnumber);  break;
    118a:	e0 e3       	ldi	r30, 0x30	; 48
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_vidgetpinvalue+0xe8>
    119e:	55 95       	asr	r21
    11a0:	47 95       	ror	r20
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_vidgetpinvalue+0xe4>
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	eb 81       	ldd	r30, Y+3	; 0x03
    11ac:	fc 81       	ldd	r31, Y+4	; 0x04
    11ae:	80 83       	st	Z, r24
	}
}
    11b0:	26 96       	adiw	r28, 0x06	; 6
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <DIO_vidsetportvalue>:

/*set port*/
void DIO_vidsetportvalue(u8 copy_u8port,u8 copy_u8portvalue)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <DIO_vidsetportvalue+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <DIO_vidsetportvalue+0x8>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8port)
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3c 83       	std	Y+4, r19	; 0x04
    11da:	2b 83       	std	Y+3, r18	; 0x03
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	91 05       	cpc	r25, r1
    11e4:	d9 f0       	breq	.+54     	; 0x121c <DIO_vidsetportvalue+0x5a>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	24 30       	cpi	r18, 0x04	; 4
    11ec:	31 05       	cpc	r19, r1
    11ee:	34 f4       	brge	.+12     	; 0x11fc <DIO_vidsetportvalue+0x3a>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	82 30       	cpi	r24, 0x02	; 2
    11f6:	91 05       	cpc	r25, r1
    11f8:	61 f0       	breq	.+24     	; 0x1212 <DIO_vidsetportvalue+0x50>
    11fa:	1e c0       	rjmp	.+60     	; 0x1238 <DIO_vidsetportvalue+0x76>
    11fc:	2b 81       	ldd	r18, Y+3	; 0x03
    11fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1200:	24 30       	cpi	r18, 0x04	; 4
    1202:	31 05       	cpc	r19, r1
    1204:	81 f0       	breq	.+32     	; 0x1226 <DIO_vidsetportvalue+0x64>
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	85 30       	cpi	r24, 0x05	; 5
    120c:	91 05       	cpc	r25, r1
    120e:	81 f0       	breq	.+32     	; 0x1230 <DIO_vidsetportvalue+0x6e>
    1210:	13 c0       	rjmp	.+38     	; 0x1238 <DIO_vidsetportvalue+0x76>
	{
	  case port_A: PORTA =copy_u8portvalue;  break;
    1212:	eb e3       	ldi	r30, 0x3B	; 59
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	80 83       	st	Z, r24
    121a:	0e c0       	rjmp	.+28     	; 0x1238 <DIO_vidsetportvalue+0x76>
	  case port_B: PORTB =copy_u8portvalue;  break;
    121c:	e8 e3       	ldi	r30, 0x38	; 56
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 83       	st	Z, r24
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <DIO_vidsetportvalue+0x76>
	  case port_C: PORTC =copy_u8portvalue;  break;
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	80 83       	st	Z, r24
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <DIO_vidsetportvalue+0x76>
	  case port_D: PORTD =copy_u8portvalue;  break;
    1230:	e2 e3       	ldi	r30, 0x32	; 50
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	80 83       	st	Z, r24
	}

}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <DIO_vidsetportdirection>:
void DIO_vidsetportdirection(u8 copy_u8port,u8 copy_u8portdirection)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <DIO_vidsetportdirection+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <DIO_vidsetportdirection+0x8>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3c 83       	std	Y+4, r19	; 0x04
    125e:	2b 83       	std	Y+3, r18	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	91 05       	cpc	r25, r1
    1268:	d9 f0       	breq	.+54     	; 0x12a0 <DIO_vidsetportdirection+0x5a>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	24 30       	cpi	r18, 0x04	; 4
    1270:	31 05       	cpc	r19, r1
    1272:	34 f4       	brge	.+12     	; 0x1280 <DIO_vidsetportdirection+0x3a>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	91 05       	cpc	r25, r1
    127c:	61 f0       	breq	.+24     	; 0x1296 <DIO_vidsetportdirection+0x50>
    127e:	1e c0       	rjmp	.+60     	; 0x12bc <DIO_vidsetportdirection+0x76>
    1280:	2b 81       	ldd	r18, Y+3	; 0x03
    1282:	3c 81       	ldd	r19, Y+4	; 0x04
    1284:	24 30       	cpi	r18, 0x04	; 4
    1286:	31 05       	cpc	r19, r1
    1288:	81 f0       	breq	.+32     	; 0x12aa <DIO_vidsetportdirection+0x64>
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	85 30       	cpi	r24, 0x05	; 5
    1290:	91 05       	cpc	r25, r1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <DIO_vidsetportdirection+0x6e>
    1294:	13 c0       	rjmp	.+38     	; 0x12bc <DIO_vidsetportdirection+0x76>
	{
	  case port_A: DDRA = copy_u8portdirection;  break;
    1296:	ea e3       	ldi	r30, 0x3A	; 58
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	0e c0       	rjmp	.+28     	; 0x12bc <DIO_vidsetportdirection+0x76>
	  case port_B: DDRB = copy_u8portdirection;  break;
    12a0:	e7 e3       	ldi	r30, 0x37	; 55
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
    12a8:	09 c0       	rjmp	.+18     	; 0x12bc <DIO_vidsetportdirection+0x76>
	  case port_C: DDRC = copy_u8portdirection;  break;
    12aa:	e4 e3       	ldi	r30, 0x34	; 52
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	80 83       	st	Z, r24
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <DIO_vidsetportdirection+0x76>
	  case port_D: DDRD = copy_u8portdirection;  break;
    12b4:	e1 e3       	ldi	r30, 0x31	; 49
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	80 83       	st	Z, r24
	}
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <DIO_vidgetportvalue>:
void DIO_vidgetportvalue(u8 copy_u8port,u8 *copy_pu8portvalue)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <DIO_vidgetportvalue+0x6>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <DIO_vidgetportvalue+0x8>
    12d2:	0f 92       	push	r0
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	7b 83       	std	Y+3, r23	; 0x03
    12dc:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	3d 83       	std	Y+5, r19	; 0x05
    12e6:	2c 83       	std	Y+4, r18	; 0x04
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	9d 81       	ldd	r25, Y+5	; 0x05
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	91 05       	cpc	r25, r1
    12f0:	e9 f0       	breq	.+58     	; 0x132c <DIO_vidgetportvalue+0x62>
    12f2:	2c 81       	ldd	r18, Y+4	; 0x04
    12f4:	3d 81       	ldd	r19, Y+5	; 0x05
    12f6:	24 30       	cpi	r18, 0x04	; 4
    12f8:	31 05       	cpc	r19, r1
    12fa:	34 f4       	brge	.+12     	; 0x1308 <DIO_vidgetportvalue+0x3e>
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	91 05       	cpc	r25, r1
    1304:	61 f0       	breq	.+24     	; 0x131e <DIO_vidgetportvalue+0x54>
    1306:	26 c0       	rjmp	.+76     	; 0x1354 <DIO_vidgetportvalue+0x8a>
    1308:	2c 81       	ldd	r18, Y+4	; 0x04
    130a:	3d 81       	ldd	r19, Y+5	; 0x05
    130c:	24 30       	cpi	r18, 0x04	; 4
    130e:	31 05       	cpc	r19, r1
    1310:	a1 f0       	breq	.+40     	; 0x133a <DIO_vidgetportvalue+0x70>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	85 30       	cpi	r24, 0x05	; 5
    1318:	91 05       	cpc	r25, r1
    131a:	b1 f0       	breq	.+44     	; 0x1348 <DIO_vidgetportvalue+0x7e>
    131c:	1b c0       	rjmp	.+54     	; 0x1354 <DIO_vidgetportvalue+0x8a>
	{
      case port_A: *copy_pu8portvalue=PINA;  break;
    131e:	e9 e3       	ldi	r30, 0x39	; 57
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	ea 81       	ldd	r30, Y+2	; 0x02
    1326:	fb 81       	ldd	r31, Y+3	; 0x03
    1328:	80 83       	st	Z, r24
    132a:	14 c0       	rjmp	.+40     	; 0x1354 <DIO_vidgetportvalue+0x8a>
      case port_B: *copy_pu8portvalue=PINB;  break;
    132c:	e6 e3       	ldi	r30, 0x36	; 54
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	ea 81       	ldd	r30, Y+2	; 0x02
    1334:	fb 81       	ldd	r31, Y+3	; 0x03
    1336:	80 83       	st	Z, r24
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <DIO_vidgetportvalue+0x8a>
	  case port_C: *copy_pu8portvalue=PINC;  break;
    133a:	e3 e3       	ldi	r30, 0x33	; 51
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	ea 81       	ldd	r30, Y+2	; 0x02
    1342:	fb 81       	ldd	r31, Y+3	; 0x03
    1344:	80 83       	st	Z, r24
    1346:	06 c0       	rjmp	.+12     	; 0x1354 <DIO_vidgetportvalue+0x8a>
	  case port_D: *copy_pu8portvalue=PIND;  break;
    1348:	e0 e3       	ldi	r30, 0x30	; 48
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	ea 81       	ldd	r30, Y+2	; 0x02
    1350:	fb 81       	ldd	r31, Y+3	; 0x03
    1352:	80 83       	st	Z, r24
	}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <LCD_vidsendcommand>:
#include"LCD-config.h"
#include"util/delay.h"


void LCD_vidsendcommand(u8 copy_u8command)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	6d 97       	sbiw	r28, 0x1d	; 29
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	8d 8f       	std	Y+29, r24	; 0x1d
	/*set rs pin as low*/

	DIO_vidsetpinvalue(LCD_CTRL_PORT,low,LCD_RS_PIN);
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	42 e0       	ldi	r20, 0x02	; 2
    1380:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
	/*set rw pin as low to write*/
	DIO_vidsetpinvalue(LCD_CTRL_PORT, low ,LCD_RW_PIN);
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	43 e0       	ldi	r20, 0x03	; 3
    138a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
	/*send command to data pins D0 to D7*/
	DIO_vidsetportvalue(LCD_DATA_PORT,copy_u8command);
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1392:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <DIO_vidsetportvalue>
	/*send enable pin*/
	DIO_vidsetpinvalue(LCD_CTRL_PORT,high,LCD_E_PIN);
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	61 e0       	ldi	r22, 0x01	; 1
    139a:	44 e0       	ldi	r20, 0x04	; 4
    139c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e8       	ldi	r26, 0x80	; 128
    13a6:	bf e3       	ldi	r27, 0x3F	; 63
    13a8:	89 8f       	std	Y+25, r24	; 0x19
    13aa:	9a 8f       	std	Y+26, r25	; 0x1a
    13ac:	ab 8f       	std	Y+27, r26	; 0x1b
    13ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b0:	69 8d       	ldd	r22, Y+25	; 0x19
    13b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a ef       	ldi	r20, 0xFA	; 250
    13be:	54 e4       	ldi	r21, 0x44	; 68
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8d 8b       	std	Y+21, r24	; 0x15
    13ca:	9e 8b       	std	Y+22, r25	; 0x16
    13cc:	af 8b       	std	Y+23, r26	; 0x17
    13ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13d0:	6d 89       	ldd	r22, Y+21	; 0x15
    13d2:	7e 89       	ldd	r23, Y+22	; 0x16
    13d4:	8f 89       	ldd	r24, Y+23	; 0x17
    13d6:	98 8d       	ldd	r25, Y+24	; 0x18
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e4:	88 23       	and	r24, r24
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <LCD_vidsendcommand+0x8e>
		__ticks = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 8b       	std	Y+20, r25	; 0x14
    13ee:	8b 8b       	std	Y+19, r24	; 0x13
    13f0:	3f c0       	rjmp	.+126    	; 0x1470 <LCD_vidsendcommand+0x10c>
	else if (__tmp > 65535)
    13f2:	6d 89       	ldd	r22, Y+21	; 0x15
    13f4:	7e 89       	ldd	r23, Y+22	; 0x16
    13f6:	8f 89       	ldd	r24, Y+23	; 0x17
    13f8:	98 8d       	ldd	r25, Y+24	; 0x18
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	3f ef       	ldi	r19, 0xFF	; 255
    13fe:	4f e7       	ldi	r20, 0x7F	; 127
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1406:	18 16       	cp	r1, r24
    1408:	4c f5       	brge	.+82     	; 0x145c <LCD_vidsendcommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140a:	69 8d       	ldd	r22, Y+25	; 0x19
    140c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <LCD_vidsendcommand+0xee>
    1434:	88 ec       	ldi	r24, 0xC8	; 200
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9a 8b       	std	Y+18, r25	; 0x12
    143a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    143c:	89 89       	ldd	r24, Y+17	; 0x11
    143e:	9a 89       	ldd	r25, Y+18	; 0x12
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <LCD_vidsendcommand+0xdc>
    1444:	9a 8b       	std	Y+18, r25	; 0x12
    1446:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1448:	8b 89       	ldd	r24, Y+19	; 0x13
    144a:	9c 89       	ldd	r25, Y+20	; 0x14
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	9c 8b       	std	Y+20, r25	; 0x14
    1450:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1452:	8b 89       	ldd	r24, Y+19	; 0x13
    1454:	9c 89       	ldd	r25, Y+20	; 0x14
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	69 f7       	brne	.-38     	; 0x1434 <LCD_vidsendcommand+0xd0>
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <LCD_vidsendcommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145c:	6d 89       	ldd	r22, Y+21	; 0x15
    145e:	7e 89       	ldd	r23, Y+22	; 0x16
    1460:	8f 89       	ldd	r24, Y+23	; 0x17
    1462:	98 8d       	ldd	r25, Y+24	; 0x18
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9c 8b       	std	Y+20, r25	; 0x14
    146e:	8b 8b       	std	Y+19, r24	; 0x13
    1470:	8b 89       	ldd	r24, Y+19	; 0x13
    1472:	9c 89       	ldd	r25, Y+20	; 0x14
    1474:	98 8b       	std	Y+16, r25	; 0x10
    1476:	8f 87       	std	Y+15, r24	; 0x0f
    1478:	8f 85       	ldd	r24, Y+15	; 0x0f
    147a:	98 89       	ldd	r25, Y+16	; 0x10
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <LCD_vidsendcommand+0x118>
    1480:	98 8b       	std	Y+16, r25	; 0x10
    1482:	8f 87       	std	Y+15, r24	; 0x0f
	/*delay*/
	_delay_ms(1);
	DIO_vidsetpinvalue(LCD_CTRL_PORT,low,LCD_E_PIN);
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	44 e0       	ldi	r20, 0x04	; 4
    148a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e4       	ldi	r26, 0x40	; 64
    1494:	b0 e4       	ldi	r27, 0x40	; 64
    1496:	8b 87       	std	Y+11, r24	; 0x0b
    1498:	9c 87       	std	Y+12, r25	; 0x0c
    149a:	ad 87       	std	Y+13, r26	; 0x0d
    149c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149e:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	4a ef       	ldi	r20, 0xFA	; 250
    14ac:	54 e4       	ldi	r21, 0x44	; 68
    14ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	8f 83       	std	Y+7, r24	; 0x07
    14b8:	98 87       	std	Y+8, r25	; 0x08
    14ba:	a9 87       	std	Y+9, r26	; 0x09
    14bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14be:	6f 81       	ldd	r22, Y+7	; 0x07
    14c0:	78 85       	ldd	r23, Y+8	; 0x08
    14c2:	89 85       	ldd	r24, Y+9	; 0x09
    14c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e8       	ldi	r20, 0x80	; 128
    14cc:	5f e3       	ldi	r21, 0x3F	; 63
    14ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d2:	88 23       	and	r24, r24
    14d4:	2c f4       	brge	.+10     	; 0x14e0 <LCD_vidsendcommand+0x17c>
		__ticks = 1;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9e 83       	std	Y+6, r25	; 0x06
    14dc:	8d 83       	std	Y+5, r24	; 0x05
    14de:	3f c0       	rjmp	.+126    	; 0x155e <LCD_vidsendcommand+0x1fa>
	else if (__tmp > 65535)
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	3f ef       	ldi	r19, 0xFF	; 255
    14ec:	4f e7       	ldi	r20, 0x7F	; 127
    14ee:	57 e4       	ldi	r21, 0x47	; 71
    14f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f4:	18 16       	cp	r1, r24
    14f6:	4c f5       	brge	.+82     	; 0x154a <LCD_vidsendcommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e2       	ldi	r20, 0x20	; 32
    1506:	51 e4       	ldi	r21, 0x41	; 65
    1508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	0f c0       	rjmp	.+30     	; 0x1540 <LCD_vidsendcommand+0x1dc>
    1522:	88 ec       	ldi	r24, 0xC8	; 200
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <LCD_vidsendcommand+0x1ca>
    1532:	9c 83       	std	Y+4, r25	; 0x04
    1534:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	69 f7       	brne	.-38     	; 0x1522 <LCD_vidsendcommand+0x1be>
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <LCD_vidsendcommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154a:	6f 81       	ldd	r22, Y+7	; 0x07
    154c:	78 85       	ldd	r23, Y+8	; 0x08
    154e:	89 85       	ldd	r24, Y+9	; 0x09
    1550:	9a 85       	ldd	r25, Y+10	; 0x0a
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	9a 83       	std	Y+2, r25	; 0x02
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <LCD_vidsendcommand+0x206>
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    1572:	6d 96       	adiw	r28, 0x1d	; 29
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <LCD_vidsenddata>:
void LCD_vidsenddata(u8 copy_u8data)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	6d 97       	sbiw	r28, 0x1d	; 29
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	8d 8f       	std	Y+29, r24	; 0x1d
	/*set rs pin as low*/
	DIO_vidsetpinvalue(LCD_CTRL_PORT,high,LCD_RS_PIN);
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	42 e0       	ldi	r20, 0x02	; 2
    15a0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
	/*set rw pin as low to write*/
	DIO_vidsetpinvalue(LCD_CTRL_PORT,low,LCD_RW_PIN);
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	43 e0       	ldi	r20, 0x03	; 3
    15aa:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
	/*send command to data pins D0 to D7*/
	DIO_vidsetportvalue(LCD_DATA_PORT,copy_u8data);
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15b2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <DIO_vidsetportvalue>
	/*send enable pin*/
	DIO_vidsetpinvalue(LCD_CTRL_PORT,high,LCD_E_PIN);
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	61 e0       	ldi	r22, 0x01	; 1
    15ba:	44 e0       	ldi	r20, 0x04	; 4
    15bc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a0 e8       	ldi	r26, 0x80	; 128
    15c6:	bf e3       	ldi	r27, 0x3F	; 63
    15c8:	89 8f       	std	Y+25, r24	; 0x19
    15ca:	9a 8f       	std	Y+26, r25	; 0x1a
    15cc:	ab 8f       	std	Y+27, r26	; 0x1b
    15ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d0:	69 8d       	ldd	r22, Y+25	; 0x19
    15d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	4a ef       	ldi	r20, 0xFA	; 250
    15de:	54 e4       	ldi	r21, 0x44	; 68
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	8d 8b       	std	Y+21, r24	; 0x15
    15ea:	9e 8b       	std	Y+22, r25	; 0x16
    15ec:	af 8b       	std	Y+23, r26	; 0x17
    15ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15f0:	6d 89       	ldd	r22, Y+21	; 0x15
    15f2:	7e 89       	ldd	r23, Y+22	; 0x16
    15f4:	8f 89       	ldd	r24, Y+23	; 0x17
    15f6:	98 8d       	ldd	r25, Y+24	; 0x18
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e8       	ldi	r20, 0x80	; 128
    15fe:	5f e3       	ldi	r21, 0x3F	; 63
    1600:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1604:	88 23       	and	r24, r24
    1606:	2c f4       	brge	.+10     	; 0x1612 <LCD_vidsenddata+0x8e>
		__ticks = 1;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 8b       	std	Y+20, r25	; 0x14
    160e:	8b 8b       	std	Y+19, r24	; 0x13
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <LCD_vidsenddata+0x10c>
	else if (__tmp > 65535)
    1612:	6d 89       	ldd	r22, Y+21	; 0x15
    1614:	7e 89       	ldd	r23, Y+22	; 0x16
    1616:	8f 89       	ldd	r24, Y+23	; 0x17
    1618:	98 8d       	ldd	r25, Y+24	; 0x18
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	4c f5       	brge	.+82     	; 0x167c <LCD_vidsenddata+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	69 8d       	ldd	r22, Y+25	; 0x19
    162c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    162e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	51 e4       	ldi	r21, 0x41	; 65
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9c 8b       	std	Y+20, r25	; 0x14
    1650:	8b 8b       	std	Y+19, r24	; 0x13
    1652:	0f c0       	rjmp	.+30     	; 0x1672 <LCD_vidsenddata+0xee>
    1654:	88 ec       	ldi	r24, 0xC8	; 200
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9a 8b       	std	Y+18, r25	; 0x12
    165a:	89 8b       	std	Y+17, r24	; 0x11
    165c:	89 89       	ldd	r24, Y+17	; 0x11
    165e:	9a 89       	ldd	r25, Y+18	; 0x12
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <LCD_vidsenddata+0xdc>
    1664:	9a 8b       	std	Y+18, r25	; 0x12
    1666:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1668:	8b 89       	ldd	r24, Y+19	; 0x13
    166a:	9c 89       	ldd	r25, Y+20	; 0x14
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9c 8b       	std	Y+20, r25	; 0x14
    1670:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1672:	8b 89       	ldd	r24, Y+19	; 0x13
    1674:	9c 89       	ldd	r25, Y+20	; 0x14
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	69 f7       	brne	.-38     	; 0x1654 <LCD_vidsenddata+0xd0>
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <LCD_vidsenddata+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167c:	6d 89       	ldd	r22, Y+21	; 0x15
    167e:	7e 89       	ldd	r23, Y+22	; 0x16
    1680:	8f 89       	ldd	r24, Y+23	; 0x17
    1682:	98 8d       	ldd	r25, Y+24	; 0x18
    1684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9c 8b       	std	Y+20, r25	; 0x14
    168e:	8b 8b       	std	Y+19, r24	; 0x13
    1690:	8b 89       	ldd	r24, Y+19	; 0x13
    1692:	9c 89       	ldd	r25, Y+20	; 0x14
    1694:	98 8b       	std	Y+16, r25	; 0x10
    1696:	8f 87       	std	Y+15, r24	; 0x0f
    1698:	8f 85       	ldd	r24, Y+15	; 0x0f
    169a:	98 89       	ldd	r25, Y+16	; 0x10
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <LCD_vidsenddata+0x118>
    16a0:	98 8b       	std	Y+16, r25	; 0x10
    16a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vidsetpinvalue(LCD_CTRL_PORT,low,LCD_E_PIN);
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	44 e0       	ldi	r20, 0x04	; 4
    16aa:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a0 e4       	ldi	r26, 0x40	; 64
    16b4:	b0 e4       	ldi	r27, 0x40	; 64
    16b6:	8b 87       	std	Y+11, r24	; 0x0b
    16b8:	9c 87       	std	Y+12, r25	; 0x0c
    16ba:	ad 87       	std	Y+13, r26	; 0x0d
    16bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16be:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	4a ef       	ldi	r20, 0xFA	; 250
    16cc:	54 e4       	ldi	r21, 0x44	; 68
    16ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	8f 83       	std	Y+7, r24	; 0x07
    16d8:	98 87       	std	Y+8, r25	; 0x08
    16da:	a9 87       	std	Y+9, r26	; 0x09
    16dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16de:	6f 81       	ldd	r22, Y+7	; 0x07
    16e0:	78 85       	ldd	r23, Y+8	; 0x08
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e8       	ldi	r20, 0x80	; 128
    16ec:	5f e3       	ldi	r21, 0x3F	; 63
    16ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f2:	88 23       	and	r24, r24
    16f4:	2c f4       	brge	.+10     	; 0x1700 <LCD_vidsenddata+0x17c>
		__ticks = 1;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9e 83       	std	Y+6, r25	; 0x06
    16fc:	8d 83       	std	Y+5, r24	; 0x05
    16fe:	3f c0       	rjmp	.+126    	; 0x177e <LCD_vidsenddata+0x1fa>
	else if (__tmp > 65535)
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	3f ef       	ldi	r19, 0xFF	; 255
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	57 e4       	ldi	r21, 0x47	; 71
    1710:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1714:	18 16       	cp	r1, r24
    1716:	4c f5       	brge	.+82     	; 0x176a <LCD_vidsenddata+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1718:	6b 85       	ldd	r22, Y+11	; 0x0b
    171a:	7c 85       	ldd	r23, Y+12	; 0x0c
    171c:	8d 85       	ldd	r24, Y+13	; 0x0d
    171e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e2       	ldi	r20, 0x20	; 32
    1726:	51 e4       	ldi	r21, 0x41	; 65
    1728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	9e 83       	std	Y+6, r25	; 0x06
    173e:	8d 83       	std	Y+5, r24	; 0x05
    1740:	0f c0       	rjmp	.+30     	; 0x1760 <LCD_vidsenddata+0x1dc>
    1742:	88 ec       	ldi	r24, 0xC8	; 200
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9c 83       	std	Y+4, r25	; 0x04
    1748:	8b 83       	std	Y+3, r24	; 0x03
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <LCD_vidsenddata+0x1ca>
    1752:	9c 83       	std	Y+4, r25	; 0x04
    1754:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	9e 81       	ldd	r25, Y+6	; 0x06
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	69 f7       	brne	.-38     	; 0x1742 <LCD_vidsenddata+0x1be>
    1768:	14 c0       	rjmp	.+40     	; 0x1792 <LCD_vidsenddata+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	8d 83       	std	Y+5, r24	; 0x05
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	9a 81       	ldd	r25, Y+2	; 0x02
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <LCD_vidsenddata+0x206>
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01


	/*delay*/
	_delay_ms(3);
}
    1792:	6d 96       	adiw	r28, 0x1d	; 29
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <LCD_vidinit>:
void LCD_vidinit(void)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	e8 97       	sbiw	r28, 0x38	; 56
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a0 e2       	ldi	r26, 0x20	; 32
    17be:	b2 e4       	ldi	r27, 0x42	; 66
    17c0:	8d ab       	std	Y+53, r24	; 0x35
    17c2:	9e ab       	std	Y+54, r25	; 0x36
    17c4:	af ab       	std	Y+55, r26	; 0x37
    17c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	6d a9       	ldd	r22, Y+53	; 0x35
    17ca:	7e a9       	ldd	r23, Y+54	; 0x36
    17cc:	8f a9       	ldd	r24, Y+55	; 0x37
    17ce:	98 ad       	ldd	r25, Y+56	; 0x38
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a ef       	ldi	r20, 0xFA	; 250
    17d6:	54 e4       	ldi	r21, 0x44	; 68
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	89 ab       	std	Y+49, r24	; 0x31
    17e2:	9a ab       	std	Y+50, r25	; 0x32
    17e4:	ab ab       	std	Y+51, r26	; 0x33
    17e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17e8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ea:	7a a9       	ldd	r23, Y+50	; 0x32
    17ec:	8b a9       	ldd	r24, Y+51	; 0x33
    17ee:	9c a9       	ldd	r25, Y+52	; 0x34
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	2c f4       	brge	.+10     	; 0x180a <LCD_vidinit+0x66>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	98 ab       	std	Y+48, r25	; 0x30
    1806:	8f a7       	std	Y+47, r24	; 0x2f
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <LCD_vidinit+0xe4>
	else if (__tmp > 65535)
    180a:	69 a9       	ldd	r22, Y+49	; 0x31
    180c:	7a a9       	ldd	r23, Y+50	; 0x32
    180e:	8b a9       	ldd	r24, Y+51	; 0x33
    1810:	9c a9       	ldd	r25, Y+52	; 0x34
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	4c f5       	brge	.+82     	; 0x1874 <LCD_vidinit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	6d a9       	ldd	r22, Y+53	; 0x35
    1824:	7e a9       	ldd	r23, Y+54	; 0x36
    1826:	8f a9       	ldd	r24, Y+55	; 0x37
    1828:	98 ad       	ldd	r25, Y+56	; 0x38
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e2       	ldi	r20, 0x20	; 32
    1830:	51 e4       	ldi	r21, 0x41	; 65
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	98 ab       	std	Y+48, r25	; 0x30
    1848:	8f a7       	std	Y+47, r24	; 0x2f
    184a:	0f c0       	rjmp	.+30     	; 0x186a <LCD_vidinit+0xc6>
    184c:	88 ec       	ldi	r24, 0xC8	; 200
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9e a7       	std	Y+46, r25	; 0x2e
    1852:	8d a7       	std	Y+45, r24	; 0x2d
    1854:	8d a5       	ldd	r24, Y+45	; 0x2d
    1856:	9e a5       	ldd	r25, Y+46	; 0x2e
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <LCD_vidinit+0xb4>
    185c:	9e a7       	std	Y+46, r25	; 0x2e
    185e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	8f a5       	ldd	r24, Y+47	; 0x2f
    1862:	98 a9       	ldd	r25, Y+48	; 0x30
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	98 ab       	std	Y+48, r25	; 0x30
    1868:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	8f a5       	ldd	r24, Y+47	; 0x2f
    186c:	98 a9       	ldd	r25, Y+48	; 0x30
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	69 f7       	brne	.-38     	; 0x184c <LCD_vidinit+0xa8>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <LCD_vidinit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	69 a9       	ldd	r22, Y+49	; 0x31
    1876:	7a a9       	ldd	r23, Y+50	; 0x32
    1878:	8b a9       	ldd	r24, Y+51	; 0x33
    187a:	9c a9       	ldd	r25, Y+52	; 0x34
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	98 ab       	std	Y+48, r25	; 0x30
    1886:	8f a7       	std	Y+47, r24	; 0x2f
    1888:	8f a5       	ldd	r24, Y+47	; 0x2f
    188a:	98 a9       	ldd	r25, Y+48	; 0x30
    188c:	9c a7       	std	Y+44, r25	; 0x2c
    188e:	8b a7       	std	Y+43, r24	; 0x2b
    1890:	8b a5       	ldd	r24, Y+43	; 0x2b
    1892:	9c a5       	ldd	r25, Y+44	; 0x2c
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <LCD_vidinit+0xf0>
    1898:	9c a7       	std	Y+44, r25	; 0x2c
    189a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	/*FUNCTION SET*/
	LCD_vidsendcommand(0x38);
    189c:	88 e3       	ldi	r24, 0x38	; 56
    189e:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_vidsendcommand>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 e2       	ldi	r26, 0x20	; 32
    18a8:	b1 e4       	ldi	r27, 0x41	; 65
    18aa:	8f a3       	std	Y+39, r24	; 0x27
    18ac:	98 a7       	std	Y+40, r25	; 0x28
    18ae:	a9 a7       	std	Y+41, r26	; 0x29
    18b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	6f a1       	ldd	r22, Y+39	; 0x27
    18b4:	78 a5       	ldd	r23, Y+40	; 0x28
    18b6:	89 a5       	ldd	r24, Y+41	; 0x29
    18b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a ef       	ldi	r20, 0xFA	; 250
    18c0:	54 e4       	ldi	r21, 0x44	; 68
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8b a3       	std	Y+35, r24	; 0x23
    18cc:	9c a3       	std	Y+36, r25	; 0x24
    18ce:	ad a3       	std	Y+37, r26	; 0x25
    18d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18d2:	6b a1       	ldd	r22, Y+35	; 0x23
    18d4:	7c a1       	ldd	r23, Y+36	; 0x24
    18d6:	8d a1       	ldd	r24, Y+37	; 0x25
    18d8:	9e a1       	ldd	r25, Y+38	; 0x26
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <LCD_vidinit+0x150>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9a a3       	std	Y+34, r25	; 0x22
    18f0:	89 a3       	std	Y+33, r24	; 0x21
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <LCD_vidinit+0x1ce>
	else if (__tmp > 65535)
    18f4:	6b a1       	ldd	r22, Y+35	; 0x23
    18f6:	7c a1       	ldd	r23, Y+36	; 0x24
    18f8:	8d a1       	ldd	r24, Y+37	; 0x25
    18fa:	9e a1       	ldd	r25, Y+38	; 0x26
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <LCD_vidinit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	6f a1       	ldd	r22, Y+39	; 0x27
    190e:	78 a5       	ldd	r23, Y+40	; 0x28
    1910:	89 a5       	ldd	r24, Y+41	; 0x29
    1912:	9a a5       	ldd	r25, Y+42	; 0x2a
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9a a3       	std	Y+34, r25	; 0x22
    1932:	89 a3       	std	Y+33, r24	; 0x21
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <LCD_vidinit+0x1b0>
    1936:	88 ec       	ldi	r24, 0xC8	; 200
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	98 a3       	std	Y+32, r25	; 0x20
    193c:	8f 8f       	std	Y+31, r24	; 0x1f
    193e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1940:	98 a1       	ldd	r25, Y+32	; 0x20
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_vidinit+0x19e>
    1946:	98 a3       	std	Y+32, r25	; 0x20
    1948:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	89 a1       	ldd	r24, Y+33	; 0x21
    194c:	9a a1       	ldd	r25, Y+34	; 0x22
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	89 a1       	ldd	r24, Y+33	; 0x21
    1956:	9a a1       	ldd	r25, Y+34	; 0x22
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <LCD_vidinit+0x192>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <LCD_vidinit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	6b a1       	ldd	r22, Y+35	; 0x23
    1960:	7c a1       	ldd	r23, Y+36	; 0x24
    1962:	8d a1       	ldd	r24, Y+37	; 0x25
    1964:	9e a1       	ldd	r25, Y+38	; 0x26
    1966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9a a3       	std	Y+34, r25	; 0x22
    1970:	89 a3       	std	Y+33, r24	; 0x21
    1972:	89 a1       	ldd	r24, Y+33	; 0x21
    1974:	9a a1       	ldd	r25, Y+34	; 0x22
    1976:	9e 8f       	std	Y+30, r25	; 0x1e
    1978:	8d 8f       	std	Y+29, r24	; 0x1d
    197a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    197c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_vidinit+0x1da>
    1982:	9e 8f       	std	Y+30, r25	; 0x1e
    1984:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	/*display on off */
	LCD_vidsendcommand(0x0c);
    1986:	8c e0       	ldi	r24, 0x0C	; 12
    1988:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_vidsendcommand>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a0 e2       	ldi	r26, 0x20	; 32
    1992:	b1 e4       	ldi	r27, 0x41	; 65
    1994:	89 8f       	std	Y+25, r24	; 0x19
    1996:	9a 8f       	std	Y+26, r25	; 0x1a
    1998:	ab 8f       	std	Y+27, r26	; 0x1b
    199a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199c:	69 8d       	ldd	r22, Y+25	; 0x19
    199e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a ef       	ldi	r20, 0xFA	; 250
    19aa:	54 e4       	ldi	r21, 0x44	; 68
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8d 8b       	std	Y+21, r24	; 0x15
    19b6:	9e 8b       	std	Y+22, r25	; 0x16
    19b8:	af 8b       	std	Y+23, r26	; 0x17
    19ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19bc:	6d 89       	ldd	r22, Y+21	; 0x15
    19be:	7e 89       	ldd	r23, Y+22	; 0x16
    19c0:	8f 89       	ldd	r24, Y+23	; 0x17
    19c2:	98 8d       	ldd	r25, Y+24	; 0x18
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	5f e3       	ldi	r21, 0x3F	; 63
    19cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	2c f4       	brge	.+10     	; 0x19de <LCD_vidinit+0x23a>
		__ticks = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9c 8b       	std	Y+20, r25	; 0x14
    19da:	8b 8b       	std	Y+19, r24	; 0x13
    19dc:	3f c0       	rjmp	.+126    	; 0x1a5c <LCD_vidinit+0x2b8>
	else if (__tmp > 65535)
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	3f ef       	ldi	r19, 0xFF	; 255
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	57 e4       	ldi	r21, 0x47	; 71
    19ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	4c f5       	brge	.+82     	; 0x1a48 <LCD_vidinit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f6:	69 8d       	ldd	r22, Y+25	; 0x19
    19f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e2       	ldi	r20, 0x20	; 32
    1a04:	51 e4       	ldi	r21, 0x41	; 65
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9c 8b       	std	Y+20, r25	; 0x14
    1a1c:	8b 8b       	std	Y+19, r24	; 0x13
    1a1e:	0f c0       	rjmp	.+30     	; 0x1a3e <LCD_vidinit+0x29a>
    1a20:	88 ec       	ldi	r24, 0xC8	; 200
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9a 8b       	std	Y+18, r25	; 0x12
    1a26:	89 8b       	std	Y+17, r24	; 0x11
    1a28:	89 89       	ldd	r24, Y+17	; 0x11
    1a2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_vidinit+0x288>
    1a30:	9a 8b       	std	Y+18, r25	; 0x12
    1a32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a34:	8b 89       	ldd	r24, Y+19	; 0x13
    1a36:	9c 89       	ldd	r25, Y+20	; 0x14
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	9c 8b       	std	Y+20, r25	; 0x14
    1a3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a40:	9c 89       	ldd	r25, Y+20	; 0x14
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	69 f7       	brne	.-38     	; 0x1a20 <LCD_vidinit+0x27c>
    1a46:	14 c0       	rjmp	.+40     	; 0x1a70 <LCD_vidinit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a48:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9c 8b       	std	Y+20, r25	; 0x14
    1a5a:	8b 8b       	std	Y+19, r24	; 0x13
    1a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a60:	98 8b       	std	Y+16, r25	; 0x10
    1a62:	8f 87       	std	Y+15, r24	; 0x0f
    1a64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a66:	98 89       	ldd	r25, Y+16	; 0x10
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_vidinit+0x2c4>
    1a6c:	98 8b       	std	Y+16, r25	; 0x10
    1a6e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	/* display clear*/
	LCD_vidsendcommand(1);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_vidsendcommand>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a0 e2       	ldi	r26, 0x20	; 32
    1a7c:	b1 e4       	ldi	r27, 0x41	; 65
    1a7e:	8b 87       	std	Y+11, r24	; 0x0b
    1a80:	9c 87       	std	Y+12, r25	; 0x0c
    1a82:	ad 87       	std	Y+13, r26	; 0x0d
    1a84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a ef       	ldi	r20, 0xFA	; 250
    1a94:	54 e4       	ldi	r21, 0x44	; 68
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8f 83       	std	Y+7, r24	; 0x07
    1aa0:	98 87       	std	Y+8, r25	; 0x08
    1aa2:	a9 87       	std	Y+9, r26	; 0x09
    1aa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa8:	78 85       	ldd	r23, Y+8	; 0x08
    1aaa:	89 85       	ldd	r24, Y+9	; 0x09
    1aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <LCD_vidinit+0x324>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <LCD_vidinit+0x3a2>
	else if (__tmp > 65535)
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <LCD_vidinit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <LCD_vidinit+0x384>
    1b0a:	88 ec       	ldi	r24, 0xC8	; 200
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	8b 83       	std	Y+3, r24	; 0x03
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_vidinit+0x372>
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <LCD_vidinit+0x366>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <LCD_vidinit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	6f 81       	ldd	r22, Y+7	; 0x07
    1b34:	78 85       	ldd	r23, Y+8	; 0x08
    1b36:	89 85       	ldd	r24, Y+9	; 0x09
    1b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_vidinit+0x3ae>
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1b5a:	e8 96       	adiw	r28, 0x38	; 56
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <LCD_vidgotoxy>:
/*going to any place in display*/
void LCD_vidgotoxy(u8 copy_u8xpos,u8 copy_u8ypos)
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <LCD_vidgotoxy+0x6>
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	8a 83       	std	Y+2, r24	; 0x02
    1b7a:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8address=0;
    1b7c:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8xpos==0)
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	88 23       	and	r24, r24
    1b82:	19 f4       	brne	.+6      	; 0x1b8a <LCD_vidgotoxy+0x1e>
	{
		local_u8address=copy_u8ypos;
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	06 c0       	rjmp	.+12     	; 0x1b96 <LCD_vidgotoxy+0x2a>
	}
	else if (copy_u8xpos==1)
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	19 f4       	brne	.+6      	; 0x1b96 <LCD_vidgotoxy+0x2a>
	{
		local_u8address=(copy_u8ypos+0x40);
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	80 5c       	subi	r24, 0xC0	; 192
    1b94:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_vidsendcommand(128+local_u8address);
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	80 58       	subi	r24, 0x80	; 128
    1b9a:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_vidsendcommand>
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <LCD_vidcreatespecialchar>:
void LCD_vidcreatespecialchar(u8 *copy_u8pattern,u8 copy_u8location,u8 copy_u8xpos,u8 copy_u8ypos)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	28 97       	sbiw	r28, 0x08	; 8
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	9d 83       	std	Y+5, r25	; 0x05
    1bc0:	8c 83       	std	Y+4, r24	; 0x04
    1bc2:	6e 83       	std	Y+6, r22	; 0x06
    1bc4:	4f 83       	std	Y+7, r20	; 0x07
    1bc6:	28 87       	std	Y+8, r18	; 0x08
	u8 local_u8address=0;
    1bc8:	1b 82       	std	Y+3, r1	; 0x03
	local_u8address=8 * copy_u8location ;
    1bca:	8e 81       	ldd	r24, Y+6	; 0x06
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
	LCD_vidsendcommand(64+local_u8address);
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	80 5c       	subi	r24, 0xC0	; 192
    1be2:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_vidsendcommand>
	for(int i=0;i<8;i++)
    1be6:	1a 82       	std	Y+2, r1	; 0x02
    1be8:	19 82       	std	Y+1, r1	; 0x01
    1bea:	0f c0       	rjmp	.+30     	; 0x1c0a <LCD_vidcreatespecialchar+0x60>
	{
		LCD_vidsenddata(copy_u8pattern[i]);
    1bec:	29 81       	ldd	r18, Y+1	; 0x01
    1bee:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	e2 0f       	add	r30, r18
    1bf8:	f3 1f       	adc	r31, r19
    1bfa:	80 81       	ld	r24, Z
    1bfc:	0e 94 c2 0a 	call	0x1584	; 0x1584 <LCD_vidsenddata>
void LCD_vidcreatespecialchar(u8 *copy_u8pattern,u8 copy_u8location,u8 copy_u8xpos,u8 copy_u8ypos)
{
	u8 local_u8address=0;
	local_u8address=8 * copy_u8location ;
	LCD_vidsendcommand(64+local_u8address);
	for(int i=0;i<8;i++)
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	88 30       	cpi	r24, 0x08	; 8
    1c10:	91 05       	cpc	r25, r1
    1c12:	64 f3       	brlt	.-40     	; 0x1bec <LCD_vidcreatespecialchar+0x42>
	{
		LCD_vidsenddata(copy_u8pattern[i]);
	}
	LCD_vidgotoxy(copy_u8xpos, copy_u8ypos);
    1c14:	8f 81       	ldd	r24, Y+7	; 0x07
    1c16:	68 85       	ldd	r22, Y+8	; 0x08
    1c18:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <LCD_vidgotoxy>
	LCD_vidsenddata(copy_u8location);
    1c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <LCD_vidsenddata>
}
    1c22:	28 96       	adiw	r28, 0x08	; 8
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <LCD_vidsendstring>:
void LCD_vidsendstring(u8 *copy_pu8data)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <LCD_vidsendstring+0x6>
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9b 83       	std	Y+3, r25	; 0x03
    1c42:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1c44:	19 82       	std	Y+1, r1	; 0x01
    1c46:	0e c0       	rjmp	.+28     	; 0x1c64 <LCD_vidsendstring+0x30>
	while((copy_pu8data[i])!='\0')
	{
		LCD_vidsenddata(copy_pu8data[i]);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	9b 81       	ldd	r25, Y+3	; 0x03
    1c52:	fc 01       	movw	r30, r24
    1c54:	e2 0f       	add	r30, r18
    1c56:	f3 1f       	adc	r31, r19
    1c58:	80 81       	ld	r24, Z
    1c5a:	0e 94 c2 0a 	call	0x1584	; 0x1584 <LCD_vidsenddata>
		i++;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	8f 5f       	subi	r24, 0xFF	; 255
    1c62:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidsenddata(copy_u8location);
}
void LCD_vidsendstring(u8 *copy_pu8data)
{
	u8 i=0;
	while((copy_pu8data[i])!='\0')
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6e:	fc 01       	movw	r30, r24
    1c70:	e2 0f       	add	r30, r18
    1c72:	f3 1f       	adc	r31, r19
    1c74:	80 81       	ld	r24, Z
    1c76:	88 23       	and	r24, r24
    1c78:	39 f7       	brne	.-50     	; 0x1c48 <LCD_vidsendstring+0x14>
	{
		LCD_vidsenddata(copy_pu8data[i]);
		i++;
	}
}
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <LCD_vidclear>:
void LCD_vidclear(void)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendcommand(0x01);
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_vidsendcommand>
}
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <PRESS_Read>:
#include "ADC_interface.h"

#define MPX_4115  ADC0

u16 PRESS_Read(void)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <PRESS_Read+0x6>
    1ca0:	0f 92       	push	r0
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
	u8 Read =ADC_u8readchannel_synchronous(1);
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8readchannel_synchronous>
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    u32 P =((u32)Read-55)*10857 + 1500000 ;
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	89 e6       	ldi	r24, 0x69	; 105
    1cb6:	9a e2       	ldi	r25, 0x2A	; 42
    1cb8:	ac 01       	movw	r20, r24
    1cba:	24 9f       	mul	r18, r20
    1cbc:	c0 01       	movw	r24, r0
    1cbe:	25 9f       	mul	r18, r21
    1cc0:	90 0d       	add	r25, r0
    1cc2:	34 9f       	mul	r19, r20
    1cc4:	90 0d       	add	r25, r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	8f 52       	subi	r24, 0x2F	; 47
    1cca:	99 43       	sbci	r25, 0x39	; 57
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
	//u16 P =(((u32)Read-40)*625)/5888+ 15;
	P = P /10000;
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	20 e1       	ldi	r18, 0x10	; 16
    1cd6:	37 e2       	ldi	r19, 0x27	; 39
    1cd8:	b9 01       	movw	r22, r18
    1cda:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__udivmodhi4>
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	//u8 Read =ADC_u8readchannel_synchronous(1);
	//u16 P=(Read*125)/255 ;
	return P ;
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <main>:
u8 arr[10];
u8 pot;
u16 pressure;
void print_pot(void);
int main(void)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	2e 97       	sbiw	r28, 0x0e	; 14
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
	DIO_vidsetpindirection(port_D,0,output);
    1d08:	85 e0       	ldi	r24, 0x05	; 5
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	41 e0       	ldi	r20, 0x01	; 1
    1d0e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_vidsetpindirection>
	DIO_vidsetpindirection(port_D,1,output);
    1d12:	85 e0       	ldi	r24, 0x05	; 5
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_vidsetpindirection>
	DIO_vidsetpindirection(LCD_CTRL_PORT,2,output);
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	62 e0       	ldi	r22, 0x02	; 2
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_vidsetpindirection>
	DIO_vidsetpindirection(LCD_CTRL_PORT,3,output);
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	63 e0       	ldi	r22, 0x03	; 3
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_vidsetpindirection>
	DIO_vidsetpindirection(LCD_CTRL_PORT,4,output);
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	64 e0       	ldi	r22, 0x04	; 4
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_vidsetpindirection>
	DIO_vidsetportdirection(port_B,0xff);
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	6f ef       	ldi	r22, 0xFF	; 255
    1d3e:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_vidsetportdirection>
	DIO_vidsetpindirection(port_A,0,input);
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_vidsetpindirection>
	DIO_vidsetpindirection(port_A,1,input);
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <DIO_vidsetpindirection>
	LCD_vidinit();
    1d56:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCD_vidinit>
	ADC_vidinit();
    1d5a:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_vidinit>
	while(1)
	{

		pot=ADC_u8readchannel_synchronous(0);
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8readchannel_synchronous>
    1d64:	80 93 b6 00 	sts	0x00B6, r24
		pressure= ADC_u8readchannel_synchronous(1);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8readchannel_synchronous>
    1d6e:	88 2f       	mov	r24, r24
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	90 93 b5 00 	sts	0x00B5, r25
    1d76:	80 93 b4 00 	sts	0x00B4, r24

		//pressure=PRESS_Read();
		if(pot < 100)
    1d7a:	80 91 b6 00 	lds	r24, 0x00B6
    1d7e:	84 36       	cpi	r24, 0x64	; 100
    1d80:	b0 f4       	brcc	.+44     	; 0x1dae <main+0xba>
		{
			LCD_vidgotoxy(0,0);
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <LCD_vidgotoxy>
			LCD_vidsendstring("WATER OFF!!");
    1d8a:	80 e6       	ldi	r24, 0x60	; 96
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_vidsendstring>
			LCD_vidgotoxy(1,0);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <LCD_vidgotoxy>
			LCD_vidsendstring("WATER OFF!!");
    1d9a:	80 e6       	ldi	r24, 0x60	; 96
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_vidsendstring>
			DIO_vidsetpinvalue(port_D,low,0);
    1da2:	85 e0       	ldi	r24, 0x05	; 5
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
    1dac:	d8 cf       	rjmp	.-80     	; 0x1d5e <main+0x6a>

		}
		else
		{
			if(pressure < 100)
    1dae:	80 91 b4 00 	lds	r24, 0x00B4
    1db2:	90 91 b5 00 	lds	r25, 0x00B5
    1db6:	84 36       	cpi	r24, 0x64	; 100
    1db8:	91 05       	cpc	r25, r1
    1dba:	a0 f4       	brcc	.+40     	; 0x1de4 <main+0xf0>
			{
				DIO_vidsetpinvalue(port_D,high,0);
    1dbc:	85 e0       	ldi	r24, 0x05	; 5
    1dbe:	61 e0       	ldi	r22, 0x01	; 1
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
				//LCD_vidclear();
				LCD_vidgotoxy(0,0);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <LCD_vidgotoxy>
				LCD_vidsendstring("MOTOR ON   ");
    1dce:	8c e6       	ldi	r24, 0x6C	; 108
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_vidsendstring>
				LCD_vidgotoxy(0,0);
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <LCD_vidgotoxy>
				print_pot();
    1dde:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <print_pot>
    1de2:	bd cf       	rjmp	.-134    	; 0x1d5e <main+0x6a>
			}
			else if ((pressure < 150)&&(pressure > 100))
    1de4:	80 91 b4 00 	lds	r24, 0x00B4
    1de8:	90 91 b5 00 	lds	r25, 0x00B5
    1dec:	86 39       	cpi	r24, 0x96	; 150
    1dee:	91 05       	cpc	r25, r1
    1df0:	50 f4       	brcc	.+20     	; 0x1e06 <main+0x112>
    1df2:	80 91 b4 00 	lds	r24, 0x00B4
    1df6:	90 91 b5 00 	lds	r25, 0x00B5
    1dfa:	85 36       	cpi	r24, 0x65	; 101
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	18 f0       	brcs	.+6      	; 0x1e06 <main+0x112>
			{
				print_pot();
    1e00:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <print_pot>
    1e04:	ac cf       	rjmp	.-168    	; 0x1d5e <main+0x6a>
			}
			else if ((pressure < 200)&&(pressure > 150))
    1e06:	80 91 b4 00 	lds	r24, 0x00B4
    1e0a:	90 91 b5 00 	lds	r25, 0x00B5
    1e0e:	88 3c       	cpi	r24, 0xC8	; 200
    1e10:	91 05       	cpc	r25, r1
    1e12:	b8 f4       	brcc	.+46     	; 0x1e42 <main+0x14e>
    1e14:	80 91 b4 00 	lds	r24, 0x00B4
    1e18:	90 91 b5 00 	lds	r25, 0x00B5
    1e1c:	87 39       	cpi	r24, 0x97	; 151
    1e1e:	91 05       	cpc	r25, r1
    1e20:	80 f0       	brcs	.+32     	; 0x1e42 <main+0x14e>
			{
				DIO_vidsetpinvalue(port_D,low,0);
    1e22:	85 e0       	ldi	r24, 0x05	; 5
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
				//LCD_vidclear();
				LCD_vidgotoxy(0,0);
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <LCD_vidgotoxy>
				LCD_vidsendstring("MOTOR OFF   ");
    1e34:	88 e7       	ldi	r24, 0x78	; 120
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_vidsendstring>
				print_pot();
    1e3c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <print_pot>
    1e40:	8e cf       	rjmp	.-228    	; 0x1d5e <main+0x6a>
			}
			else if (pressure > 200)
    1e42:	80 91 b4 00 	lds	r24, 0x00B4
    1e46:	90 91 b5 00 	lds	r25, 0x00B5
    1e4a:	89 3c       	cpi	r24, 0xC9	; 201
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	08 f4       	brcc	.+2      	; 0x1e52 <main+0x15e>
    1e50:	86 cf       	rjmp	.-244    	; 0x1d5e <main+0x6a>
			{
				LCD_vidgotoxy(0,0);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <LCD_vidgotoxy>
				LCD_vidsendstring("OVER FLOW!!");
    1e5a:	85 e8       	ldi	r24, 0x85	; 133
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_vidsendstring>
				LCD_vidgotoxy(1,0);
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	60 e0       	ldi	r22, 0x00	; 0
    1e66:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <LCD_vidgotoxy>
				LCD_vidsendstring("OVER FLOW!!");
    1e6a:	85 e8       	ldi	r24, 0x85	; 133
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_vidsendstring>
				DIO_vidsetpinvalue(port_D,high,1);
    1e72:	85 e0       	ldi	r24, 0x05	; 5
    1e74:	61 e0       	ldi	r22, 0x01	; 1
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	aa e7       	ldi	r26, 0x7A	; 122
    1e82:	b4 e4       	ldi	r27, 0x44	; 68
    1e84:	8b 87       	std	Y+11, r24	; 0x0b
    1e86:	9c 87       	std	Y+12, r25	; 0x0c
    1e88:	ad 87       	std	Y+13, r26	; 0x0d
    1e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a ef       	ldi	r20, 0xFA	; 250
    1e9a:	54 e4       	ldi	r21, 0x44	; 68
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8f 83       	std	Y+7, r24	; 0x07
    1ea6:	98 87       	std	Y+8, r25	; 0x08
    1ea8:	a9 87       	std	Y+9, r26	; 0x09
    1eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	5f e3       	ldi	r21, 0x3F	; 63
    1ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <main+0x1da>
		__ticks = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	3f c0       	rjmp	.+126    	; 0x1f4c <main+0x258>
	else if (__tmp > 65535)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <main+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <main+0x23a>
    1f10:	88 ec       	ldi	r24, 0xC8	; 200
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <main+0x228>
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f7       	brne	.-38     	; 0x1f10 <main+0x21c>
    1f36:	14 c0       	rjmp	.+40     	; 0x1f60 <main+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	9a 81       	ldd	r25, Y+2	; 0x02
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <main+0x264>
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				DIO_vidsetpinvalue(port_D,low,1);
    1f60:	85 e0       	ldi	r24, 0x05	; 5
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 59 06 	call	0xcb2	; 0xcb2 <DIO_vidsetpinvalue>
    1f6a:	f9 ce       	rjmp	.-526    	; 0x1d5e <main+0x6a>

00001f6c <print_pot>:
			}
		}
	}
}
void print_pot(void)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
	sprintf(arr,"%d",pressure);
    1f74:	20 91 b4 00 	lds	r18, 0x00B4
    1f78:	30 91 b5 00 	lds	r19, 0x00B5
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <print_pot+0x12>
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <print_pot+0x14>
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <print_pot+0x16>
    1f82:	ed b7       	in	r30, 0x3d	; 61
    1f84:	fe b7       	in	r31, 0x3e	; 62
    1f86:	31 96       	adiw	r30, 0x01	; 1
    1f88:	8a ea       	ldi	r24, 0xAA	; 170
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	80 83       	st	Z, r24
    1f90:	81 e9       	ldi	r24, 0x91	; 145
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	93 83       	std	Z+3, r25	; 0x03
    1f96:	82 83       	std	Z+2, r24	; 0x02
    1f98:	35 83       	std	Z+5, r19	; 0x05
    1f9a:	24 83       	std	Z+4, r18	; 0x04
    1f9c:	0e 94 36 10 	call	0x206c	; 0x206c <sprintf>
    1fa0:	8d b7       	in	r24, 0x3d	; 61
    1fa2:	9e b7       	in	r25, 0x3e	; 62
    1fa4:	06 96       	adiw	r24, 0x06	; 6
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	9e bf       	out	0x3e, r25	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	8d bf       	out	0x3d, r24	; 61
	LCD_vidgotoxy(1,0);
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <LCD_vidgotoxy>
	LCD_vidsendstring("V = ");
    1fb8:	84 e9       	ldi	r24, 0x94	; 148
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_vidsendstring>
	LCD_vidsendstring(arr);
    1fc0:	8a ea       	ldi	r24, 0xAA	; 170
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_vidsendstring>
	LCD_vidsendstring("      ");
    1fc8:	89 e9       	ldi	r24, 0x99	; 153
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_vidsendstring>

}
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <__udivmodhi4>:
    1fd6:	aa 1b       	sub	r26, r26
    1fd8:	bb 1b       	sub	r27, r27
    1fda:	51 e1       	ldi	r21, 0x11	; 17
    1fdc:	07 c0       	rjmp	.+14     	; 0x1fec <__udivmodhi4_ep>

00001fde <__udivmodhi4_loop>:
    1fde:	aa 1f       	adc	r26, r26
    1fe0:	bb 1f       	adc	r27, r27
    1fe2:	a6 17       	cp	r26, r22
    1fe4:	b7 07       	cpc	r27, r23
    1fe6:	10 f0       	brcs	.+4      	; 0x1fec <__udivmodhi4_ep>
    1fe8:	a6 1b       	sub	r26, r22
    1fea:	b7 0b       	sbc	r27, r23

00001fec <__udivmodhi4_ep>:
    1fec:	88 1f       	adc	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	5a 95       	dec	r21
    1ff2:	a9 f7       	brne	.-22     	; 0x1fde <__udivmodhi4_loop>
    1ff4:	80 95       	com	r24
    1ff6:	90 95       	com	r25
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	08 95       	ret

00001ffe <__prologue_saves__>:
    1ffe:	2f 92       	push	r2
    2000:	3f 92       	push	r3
    2002:	4f 92       	push	r4
    2004:	5f 92       	push	r5
    2006:	6f 92       	push	r6
    2008:	7f 92       	push	r7
    200a:	8f 92       	push	r8
    200c:	9f 92       	push	r9
    200e:	af 92       	push	r10
    2010:	bf 92       	push	r11
    2012:	cf 92       	push	r12
    2014:	df 92       	push	r13
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	ca 1b       	sub	r28, r26
    2028:	db 0b       	sbc	r29, r27
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	09 94       	ijmp

00002036 <__epilogue_restores__>:
    2036:	2a 88       	ldd	r2, Y+18	; 0x12
    2038:	39 88       	ldd	r3, Y+17	; 0x11
    203a:	48 88       	ldd	r4, Y+16	; 0x10
    203c:	5f 84       	ldd	r5, Y+15	; 0x0f
    203e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2040:	7d 84       	ldd	r7, Y+13	; 0x0d
    2042:	8c 84       	ldd	r8, Y+12	; 0x0c
    2044:	9b 84       	ldd	r9, Y+11	; 0x0b
    2046:	aa 84       	ldd	r10, Y+10	; 0x0a
    2048:	b9 84       	ldd	r11, Y+9	; 0x09
    204a:	c8 84       	ldd	r12, Y+8	; 0x08
    204c:	df 80       	ldd	r13, Y+7	; 0x07
    204e:	ee 80       	ldd	r14, Y+6	; 0x06
    2050:	fd 80       	ldd	r15, Y+5	; 0x05
    2052:	0c 81       	ldd	r16, Y+4	; 0x04
    2054:	1b 81       	ldd	r17, Y+3	; 0x03
    2056:	aa 81       	ldd	r26, Y+2	; 0x02
    2058:	b9 81       	ldd	r27, Y+1	; 0x01
    205a:	ce 0f       	add	r28, r30
    205c:	d1 1d       	adc	r29, r1
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	ed 01       	movw	r28, r26
    206a:	08 95       	ret

0000206c <sprintf>:
    206c:	ae e0       	ldi	r26, 0x0E	; 14
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	ec e3       	ldi	r30, 0x3C	; 60
    2072:	f0 e1       	ldi	r31, 0x10	; 16
    2074:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__prologue_saves__+0x1c>
    2078:	0d 89       	ldd	r16, Y+21	; 0x15
    207a:	1e 89       	ldd	r17, Y+22	; 0x16
    207c:	86 e0       	ldi	r24, 0x06	; 6
    207e:	8c 83       	std	Y+4, r24	; 0x04
    2080:	1a 83       	std	Y+2, r17	; 0x02
    2082:	09 83       	std	Y+1, r16	; 0x01
    2084:	8f ef       	ldi	r24, 0xFF	; 255
    2086:	9f e7       	ldi	r25, 0x7F	; 127
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	9e 01       	movw	r18, r28
    208e:	27 5e       	subi	r18, 0xE7	; 231
    2090:	3f 4f       	sbci	r19, 0xFF	; 255
    2092:	ce 01       	movw	r24, r28
    2094:	01 96       	adiw	r24, 0x01	; 1
    2096:	6f 89       	ldd	r22, Y+23	; 0x17
    2098:	78 8d       	ldd	r23, Y+24	; 0x18
    209a:	a9 01       	movw	r20, r18
    209c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <vfprintf>
    20a0:	2f 81       	ldd	r18, Y+7	; 0x07
    20a2:	38 85       	ldd	r19, Y+8	; 0x08
    20a4:	02 0f       	add	r16, r18
    20a6:	13 1f       	adc	r17, r19
    20a8:	f8 01       	movw	r30, r16
    20aa:	10 82       	st	Z, r1
    20ac:	2e 96       	adiw	r28, 0x0e	; 14
    20ae:	e4 e0       	ldi	r30, 0x04	; 4
    20b0:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__epilogue_restores__+0x1c>

000020b4 <vfprintf>:
    20b4:	ab e0       	ldi	r26, 0x0B	; 11
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e0 e6       	ldi	r30, 0x60	; 96
    20ba:	f0 e1       	ldi	r31, 0x10	; 16
    20bc:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__>
    20c0:	3c 01       	movw	r6, r24
    20c2:	2b 01       	movw	r4, r22
    20c4:	5a 01       	movw	r10, r20
    20c6:	fc 01       	movw	r30, r24
    20c8:	17 82       	std	Z+7, r1	; 0x07
    20ca:	16 82       	std	Z+6, r1	; 0x06
    20cc:	83 81       	ldd	r24, Z+3	; 0x03
    20ce:	81 fd       	sbrc	r24, 1
    20d0:	03 c0       	rjmp	.+6      	; 0x20d8 <vfprintf+0x24>
    20d2:	6f ef       	ldi	r22, 0xFF	; 255
    20d4:	7f ef       	ldi	r23, 0xFF	; 255
    20d6:	c6 c1       	rjmp	.+908    	; 0x2464 <vfprintf+0x3b0>
    20d8:	9a e0       	ldi	r25, 0x0A	; 10
    20da:	89 2e       	mov	r8, r25
    20dc:	1e 01       	movw	r2, r28
    20de:	08 94       	sec
    20e0:	21 1c       	adc	r2, r1
    20e2:	31 1c       	adc	r3, r1
    20e4:	f3 01       	movw	r30, r6
    20e6:	23 81       	ldd	r18, Z+3	; 0x03
    20e8:	f2 01       	movw	r30, r4
    20ea:	23 fd       	sbrc	r18, 3
    20ec:	85 91       	lpm	r24, Z+
    20ee:	23 ff       	sbrs	r18, 3
    20f0:	81 91       	ld	r24, Z+
    20f2:	2f 01       	movw	r4, r30
    20f4:	88 23       	and	r24, r24
    20f6:	09 f4       	brne	.+2      	; 0x20fa <vfprintf+0x46>
    20f8:	b2 c1       	rjmp	.+868    	; 0x245e <vfprintf+0x3aa>
    20fa:	85 32       	cpi	r24, 0x25	; 37
    20fc:	39 f4       	brne	.+14     	; 0x210c <vfprintf+0x58>
    20fe:	23 fd       	sbrc	r18, 3
    2100:	85 91       	lpm	r24, Z+
    2102:	23 ff       	sbrs	r18, 3
    2104:	81 91       	ld	r24, Z+
    2106:	2f 01       	movw	r4, r30
    2108:	85 32       	cpi	r24, 0x25	; 37
    210a:	29 f4       	brne	.+10     	; 0x2116 <vfprintf+0x62>
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	b3 01       	movw	r22, r6
    2110:	0e 94 4d 12 	call	0x249a	; 0x249a <fputc>
    2114:	e7 cf       	rjmp	.-50     	; 0x20e4 <vfprintf+0x30>
    2116:	98 2f       	mov	r25, r24
    2118:	ff 24       	eor	r15, r15
    211a:	ee 24       	eor	r14, r14
    211c:	99 24       	eor	r9, r9
    211e:	ff e1       	ldi	r31, 0x1F	; 31
    2120:	ff 15       	cp	r31, r15
    2122:	d0 f0       	brcs	.+52     	; 0x2158 <vfprintf+0xa4>
    2124:	9b 32       	cpi	r25, 0x2B	; 43
    2126:	69 f0       	breq	.+26     	; 0x2142 <vfprintf+0x8e>
    2128:	9c 32       	cpi	r25, 0x2C	; 44
    212a:	28 f4       	brcc	.+10     	; 0x2136 <vfprintf+0x82>
    212c:	90 32       	cpi	r25, 0x20	; 32
    212e:	59 f0       	breq	.+22     	; 0x2146 <vfprintf+0x92>
    2130:	93 32       	cpi	r25, 0x23	; 35
    2132:	91 f4       	brne	.+36     	; 0x2158 <vfprintf+0xa4>
    2134:	0e c0       	rjmp	.+28     	; 0x2152 <vfprintf+0x9e>
    2136:	9d 32       	cpi	r25, 0x2D	; 45
    2138:	49 f0       	breq	.+18     	; 0x214c <vfprintf+0x98>
    213a:	90 33       	cpi	r25, 0x30	; 48
    213c:	69 f4       	brne	.+26     	; 0x2158 <vfprintf+0xa4>
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	24 c0       	rjmp	.+72     	; 0x218a <vfprintf+0xd6>
    2142:	52 e0       	ldi	r21, 0x02	; 2
    2144:	f5 2a       	or	r15, r21
    2146:	84 e0       	ldi	r24, 0x04	; 4
    2148:	f8 2a       	or	r15, r24
    214a:	28 c0       	rjmp	.+80     	; 0x219c <vfprintf+0xe8>
    214c:	98 e0       	ldi	r25, 0x08	; 8
    214e:	f9 2a       	or	r15, r25
    2150:	25 c0       	rjmp	.+74     	; 0x219c <vfprintf+0xe8>
    2152:	e0 e1       	ldi	r30, 0x10	; 16
    2154:	fe 2a       	or	r15, r30
    2156:	22 c0       	rjmp	.+68     	; 0x219c <vfprintf+0xe8>
    2158:	f7 fc       	sbrc	r15, 7
    215a:	29 c0       	rjmp	.+82     	; 0x21ae <vfprintf+0xfa>
    215c:	89 2f       	mov	r24, r25
    215e:	80 53       	subi	r24, 0x30	; 48
    2160:	8a 30       	cpi	r24, 0x0A	; 10
    2162:	70 f4       	brcc	.+28     	; 0x2180 <vfprintf+0xcc>
    2164:	f6 fe       	sbrs	r15, 6
    2166:	05 c0       	rjmp	.+10     	; 0x2172 <vfprintf+0xbe>
    2168:	98 9c       	mul	r9, r8
    216a:	90 2c       	mov	r9, r0
    216c:	11 24       	eor	r1, r1
    216e:	98 0e       	add	r9, r24
    2170:	15 c0       	rjmp	.+42     	; 0x219c <vfprintf+0xe8>
    2172:	e8 9c       	mul	r14, r8
    2174:	e0 2c       	mov	r14, r0
    2176:	11 24       	eor	r1, r1
    2178:	e8 0e       	add	r14, r24
    217a:	f0 e2       	ldi	r31, 0x20	; 32
    217c:	ff 2a       	or	r15, r31
    217e:	0e c0       	rjmp	.+28     	; 0x219c <vfprintf+0xe8>
    2180:	9e 32       	cpi	r25, 0x2E	; 46
    2182:	29 f4       	brne	.+10     	; 0x218e <vfprintf+0xda>
    2184:	f6 fc       	sbrc	r15, 6
    2186:	6b c1       	rjmp	.+726    	; 0x245e <vfprintf+0x3aa>
    2188:	40 e4       	ldi	r20, 0x40	; 64
    218a:	f4 2a       	or	r15, r20
    218c:	07 c0       	rjmp	.+14     	; 0x219c <vfprintf+0xe8>
    218e:	9c 36       	cpi	r25, 0x6C	; 108
    2190:	19 f4       	brne	.+6      	; 0x2198 <vfprintf+0xe4>
    2192:	50 e8       	ldi	r21, 0x80	; 128
    2194:	f5 2a       	or	r15, r21
    2196:	02 c0       	rjmp	.+4      	; 0x219c <vfprintf+0xe8>
    2198:	98 36       	cpi	r25, 0x68	; 104
    219a:	49 f4       	brne	.+18     	; 0x21ae <vfprintf+0xfa>
    219c:	f2 01       	movw	r30, r4
    219e:	23 fd       	sbrc	r18, 3
    21a0:	95 91       	lpm	r25, Z+
    21a2:	23 ff       	sbrs	r18, 3
    21a4:	91 91       	ld	r25, Z+
    21a6:	2f 01       	movw	r4, r30
    21a8:	99 23       	and	r25, r25
    21aa:	09 f0       	breq	.+2      	; 0x21ae <vfprintf+0xfa>
    21ac:	b8 cf       	rjmp	.-144    	; 0x211e <vfprintf+0x6a>
    21ae:	89 2f       	mov	r24, r25
    21b0:	85 54       	subi	r24, 0x45	; 69
    21b2:	83 30       	cpi	r24, 0x03	; 3
    21b4:	18 f0       	brcs	.+6      	; 0x21bc <vfprintf+0x108>
    21b6:	80 52       	subi	r24, 0x20	; 32
    21b8:	83 30       	cpi	r24, 0x03	; 3
    21ba:	38 f4       	brcc	.+14     	; 0x21ca <vfprintf+0x116>
    21bc:	44 e0       	ldi	r20, 0x04	; 4
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	a4 0e       	add	r10, r20
    21c2:	b5 1e       	adc	r11, r21
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	59 83       	std	Y+1, r21	; 0x01
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <vfprintf+0x134>
    21ca:	93 36       	cpi	r25, 0x63	; 99
    21cc:	31 f0       	breq	.+12     	; 0x21da <vfprintf+0x126>
    21ce:	93 37       	cpi	r25, 0x73	; 115
    21d0:	79 f0       	breq	.+30     	; 0x21f0 <vfprintf+0x13c>
    21d2:	93 35       	cpi	r25, 0x53	; 83
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <vfprintf+0x124>
    21d6:	56 c0       	rjmp	.+172    	; 0x2284 <vfprintf+0x1d0>
    21d8:	20 c0       	rjmp	.+64     	; 0x221a <vfprintf+0x166>
    21da:	f5 01       	movw	r30, r10
    21dc:	80 81       	ld	r24, Z
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	42 e0       	ldi	r20, 0x02	; 2
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	a4 0e       	add	r10, r20
    21e6:	b5 1e       	adc	r11, r21
    21e8:	61 01       	movw	r12, r2
    21ea:	01 e0       	ldi	r16, 0x01	; 1
    21ec:	10 e0       	ldi	r17, 0x00	; 0
    21ee:	12 c0       	rjmp	.+36     	; 0x2214 <vfprintf+0x160>
    21f0:	f5 01       	movw	r30, r10
    21f2:	c0 80       	ld	r12, Z
    21f4:	d1 80       	ldd	r13, Z+1	; 0x01
    21f6:	f6 fc       	sbrc	r15, 6
    21f8:	03 c0       	rjmp	.+6      	; 0x2200 <vfprintf+0x14c>
    21fa:	6f ef       	ldi	r22, 0xFF	; 255
    21fc:	7f ef       	ldi	r23, 0xFF	; 255
    21fe:	02 c0       	rjmp	.+4      	; 0x2204 <vfprintf+0x150>
    2200:	69 2d       	mov	r22, r9
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	42 e0       	ldi	r20, 0x02	; 2
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	a4 0e       	add	r10, r20
    220a:	b5 1e       	adc	r11, r21
    220c:	c6 01       	movw	r24, r12
    220e:	0e 94 42 12 	call	0x2484	; 0x2484 <strnlen>
    2212:	8c 01       	movw	r16, r24
    2214:	5f e7       	ldi	r21, 0x7F	; 127
    2216:	f5 22       	and	r15, r21
    2218:	14 c0       	rjmp	.+40     	; 0x2242 <vfprintf+0x18e>
    221a:	f5 01       	movw	r30, r10
    221c:	c0 80       	ld	r12, Z
    221e:	d1 80       	ldd	r13, Z+1	; 0x01
    2220:	f6 fc       	sbrc	r15, 6
    2222:	03 c0       	rjmp	.+6      	; 0x222a <vfprintf+0x176>
    2224:	6f ef       	ldi	r22, 0xFF	; 255
    2226:	7f ef       	ldi	r23, 0xFF	; 255
    2228:	02 c0       	rjmp	.+4      	; 0x222e <vfprintf+0x17a>
    222a:	69 2d       	mov	r22, r9
    222c:	70 e0       	ldi	r23, 0x00	; 0
    222e:	42 e0       	ldi	r20, 0x02	; 2
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	a4 0e       	add	r10, r20
    2234:	b5 1e       	adc	r11, r21
    2236:	c6 01       	movw	r24, r12
    2238:	0e 94 37 12 	call	0x246e	; 0x246e <strnlen_P>
    223c:	8c 01       	movw	r16, r24
    223e:	50 e8       	ldi	r21, 0x80	; 128
    2240:	f5 2a       	or	r15, r21
    2242:	f3 fe       	sbrs	r15, 3
    2244:	07 c0       	rjmp	.+14     	; 0x2254 <vfprintf+0x1a0>
    2246:	1a c0       	rjmp	.+52     	; 0x227c <vfprintf+0x1c8>
    2248:	80 e2       	ldi	r24, 0x20	; 32
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	b3 01       	movw	r22, r6
    224e:	0e 94 4d 12 	call	0x249a	; 0x249a <fputc>
    2252:	ea 94       	dec	r14
    2254:	8e 2d       	mov	r24, r14
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	08 17       	cp	r16, r24
    225a:	19 07       	cpc	r17, r25
    225c:	a8 f3       	brcs	.-22     	; 0x2248 <vfprintf+0x194>
    225e:	0e c0       	rjmp	.+28     	; 0x227c <vfprintf+0x1c8>
    2260:	f6 01       	movw	r30, r12
    2262:	f7 fc       	sbrc	r15, 7
    2264:	85 91       	lpm	r24, Z+
    2266:	f7 fe       	sbrs	r15, 7
    2268:	81 91       	ld	r24, Z+
    226a:	6f 01       	movw	r12, r30
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	b3 01       	movw	r22, r6
    2270:	0e 94 4d 12 	call	0x249a	; 0x249a <fputc>
    2274:	e1 10       	cpse	r14, r1
    2276:	ea 94       	dec	r14
    2278:	01 50       	subi	r16, 0x01	; 1
    227a:	10 40       	sbci	r17, 0x00	; 0
    227c:	01 15       	cp	r16, r1
    227e:	11 05       	cpc	r17, r1
    2280:	79 f7       	brne	.-34     	; 0x2260 <vfprintf+0x1ac>
    2282:	ea c0       	rjmp	.+468    	; 0x2458 <vfprintf+0x3a4>
    2284:	94 36       	cpi	r25, 0x64	; 100
    2286:	11 f0       	breq	.+4      	; 0x228c <vfprintf+0x1d8>
    2288:	99 36       	cpi	r25, 0x69	; 105
    228a:	69 f5       	brne	.+90     	; 0x22e6 <vfprintf+0x232>
    228c:	f7 fe       	sbrs	r15, 7
    228e:	08 c0       	rjmp	.+16     	; 0x22a0 <vfprintf+0x1ec>
    2290:	f5 01       	movw	r30, r10
    2292:	20 81       	ld	r18, Z
    2294:	31 81       	ldd	r19, Z+1	; 0x01
    2296:	42 81       	ldd	r20, Z+2	; 0x02
    2298:	53 81       	ldd	r21, Z+3	; 0x03
    229a:	84 e0       	ldi	r24, 0x04	; 4
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	0a c0       	rjmp	.+20     	; 0x22b4 <vfprintf+0x200>
    22a0:	f5 01       	movw	r30, r10
    22a2:	80 81       	ld	r24, Z
    22a4:	91 81       	ldd	r25, Z+1	; 0x01
    22a6:	9c 01       	movw	r18, r24
    22a8:	44 27       	eor	r20, r20
    22aa:	37 fd       	sbrc	r19, 7
    22ac:	40 95       	com	r20
    22ae:	54 2f       	mov	r21, r20
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a8 0e       	add	r10, r24
    22b6:	b9 1e       	adc	r11, r25
    22b8:	9f e6       	ldi	r25, 0x6F	; 111
    22ba:	f9 22       	and	r15, r25
    22bc:	57 ff       	sbrs	r21, 7
    22be:	09 c0       	rjmp	.+18     	; 0x22d2 <vfprintf+0x21e>
    22c0:	50 95       	com	r21
    22c2:	40 95       	com	r20
    22c4:	30 95       	com	r19
    22c6:	21 95       	neg	r18
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	4f 4f       	sbci	r20, 0xFF	; 255
    22cc:	5f 4f       	sbci	r21, 0xFF	; 255
    22ce:	e0 e8       	ldi	r30, 0x80	; 128
    22d0:	fe 2a       	or	r15, r30
    22d2:	ca 01       	movw	r24, r20
    22d4:	b9 01       	movw	r22, r18
    22d6:	a1 01       	movw	r20, r2
    22d8:	2a e0       	ldi	r18, 0x0A	; 10
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__ultoa_invert>
    22e0:	d8 2e       	mov	r13, r24
    22e2:	d2 18       	sub	r13, r2
    22e4:	40 c0       	rjmp	.+128    	; 0x2366 <vfprintf+0x2b2>
    22e6:	95 37       	cpi	r25, 0x75	; 117
    22e8:	29 f4       	brne	.+10     	; 0x22f4 <vfprintf+0x240>
    22ea:	1f 2d       	mov	r17, r15
    22ec:	1f 7e       	andi	r17, 0xEF	; 239
    22ee:	2a e0       	ldi	r18, 0x0A	; 10
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	1d c0       	rjmp	.+58     	; 0x232e <vfprintf+0x27a>
    22f4:	1f 2d       	mov	r17, r15
    22f6:	19 7f       	andi	r17, 0xF9	; 249
    22f8:	9f 36       	cpi	r25, 0x6F	; 111
    22fa:	61 f0       	breq	.+24     	; 0x2314 <vfprintf+0x260>
    22fc:	90 37       	cpi	r25, 0x70	; 112
    22fe:	20 f4       	brcc	.+8      	; 0x2308 <vfprintf+0x254>
    2300:	98 35       	cpi	r25, 0x58	; 88
    2302:	09 f0       	breq	.+2      	; 0x2306 <vfprintf+0x252>
    2304:	ac c0       	rjmp	.+344    	; 0x245e <vfprintf+0x3aa>
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <vfprintf+0x272>
    2308:	90 37       	cpi	r25, 0x70	; 112
    230a:	39 f0       	breq	.+14     	; 0x231a <vfprintf+0x266>
    230c:	98 37       	cpi	r25, 0x78	; 120
    230e:	09 f0       	breq	.+2      	; 0x2312 <vfprintf+0x25e>
    2310:	a6 c0       	rjmp	.+332    	; 0x245e <vfprintf+0x3aa>
    2312:	04 c0       	rjmp	.+8      	; 0x231c <vfprintf+0x268>
    2314:	28 e0       	ldi	r18, 0x08	; 8
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	0a c0       	rjmp	.+20     	; 0x232e <vfprintf+0x27a>
    231a:	10 61       	ori	r17, 0x10	; 16
    231c:	14 fd       	sbrc	r17, 4
    231e:	14 60       	ori	r17, 0x04	; 4
    2320:	20 e1       	ldi	r18, 0x10	; 16
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	04 c0       	rjmp	.+8      	; 0x232e <vfprintf+0x27a>
    2326:	14 fd       	sbrc	r17, 4
    2328:	16 60       	ori	r17, 0x06	; 6
    232a:	20 e1       	ldi	r18, 0x10	; 16
    232c:	32 e0       	ldi	r19, 0x02	; 2
    232e:	17 ff       	sbrs	r17, 7
    2330:	08 c0       	rjmp	.+16     	; 0x2342 <vfprintf+0x28e>
    2332:	f5 01       	movw	r30, r10
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	44 e0       	ldi	r20, 0x04	; 4
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	08 c0       	rjmp	.+16     	; 0x2352 <vfprintf+0x29e>
    2342:	f5 01       	movw	r30, r10
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	bc 01       	movw	r22, r24
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	42 e0       	ldi	r20, 0x02	; 2
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	a4 0e       	add	r10, r20
    2354:	b5 1e       	adc	r11, r21
    2356:	a1 01       	movw	r20, r2
    2358:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__ultoa_invert>
    235c:	d8 2e       	mov	r13, r24
    235e:	d2 18       	sub	r13, r2
    2360:	8f e7       	ldi	r24, 0x7F	; 127
    2362:	f8 2e       	mov	r15, r24
    2364:	f1 22       	and	r15, r17
    2366:	f6 fe       	sbrs	r15, 6
    2368:	0b c0       	rjmp	.+22     	; 0x2380 <vfprintf+0x2cc>
    236a:	5e ef       	ldi	r21, 0xFE	; 254
    236c:	f5 22       	and	r15, r21
    236e:	d9 14       	cp	r13, r9
    2370:	38 f4       	brcc	.+14     	; 0x2380 <vfprintf+0x2cc>
    2372:	f4 fe       	sbrs	r15, 4
    2374:	07 c0       	rjmp	.+14     	; 0x2384 <vfprintf+0x2d0>
    2376:	f2 fc       	sbrc	r15, 2
    2378:	05 c0       	rjmp	.+10     	; 0x2384 <vfprintf+0x2d0>
    237a:	8f ee       	ldi	r24, 0xEF	; 239
    237c:	f8 22       	and	r15, r24
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <vfprintf+0x2d0>
    2380:	1d 2d       	mov	r17, r13
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <vfprintf+0x2d2>
    2384:	19 2d       	mov	r17, r9
    2386:	f4 fe       	sbrs	r15, 4
    2388:	0d c0       	rjmp	.+26     	; 0x23a4 <vfprintf+0x2f0>
    238a:	fe 01       	movw	r30, r28
    238c:	ed 0d       	add	r30, r13
    238e:	f1 1d       	adc	r31, r1
    2390:	80 81       	ld	r24, Z
    2392:	80 33       	cpi	r24, 0x30	; 48
    2394:	19 f4       	brne	.+6      	; 0x239c <vfprintf+0x2e8>
    2396:	99 ee       	ldi	r25, 0xE9	; 233
    2398:	f9 22       	and	r15, r25
    239a:	08 c0       	rjmp	.+16     	; 0x23ac <vfprintf+0x2f8>
    239c:	1f 5f       	subi	r17, 0xFF	; 255
    239e:	f2 fe       	sbrs	r15, 2
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <vfprintf+0x2f8>
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <vfprintf+0x2f6>
    23a4:	8f 2d       	mov	r24, r15
    23a6:	86 78       	andi	r24, 0x86	; 134
    23a8:	09 f0       	breq	.+2      	; 0x23ac <vfprintf+0x2f8>
    23aa:	1f 5f       	subi	r17, 0xFF	; 255
    23ac:	0f 2d       	mov	r16, r15
    23ae:	f3 fc       	sbrc	r15, 3
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <vfprintf+0x326>
    23b2:	f0 fe       	sbrs	r15, 0
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <vfprintf+0x320>
    23b6:	1e 15       	cp	r17, r14
    23b8:	10 f0       	brcs	.+4      	; 0x23be <vfprintf+0x30a>
    23ba:	9d 2c       	mov	r9, r13
    23bc:	0b c0       	rjmp	.+22     	; 0x23d4 <vfprintf+0x320>
    23be:	9d 2c       	mov	r9, r13
    23c0:	9e 0c       	add	r9, r14
    23c2:	91 1a       	sub	r9, r17
    23c4:	1e 2d       	mov	r17, r14
    23c6:	06 c0       	rjmp	.+12     	; 0x23d4 <vfprintf+0x320>
    23c8:	80 e2       	ldi	r24, 0x20	; 32
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	b3 01       	movw	r22, r6
    23ce:	0e 94 4d 12 	call	0x249a	; 0x249a <fputc>
    23d2:	1f 5f       	subi	r17, 0xFF	; 255
    23d4:	1e 15       	cp	r17, r14
    23d6:	c0 f3       	brcs	.-16     	; 0x23c8 <vfprintf+0x314>
    23d8:	04 c0       	rjmp	.+8      	; 0x23e2 <vfprintf+0x32e>
    23da:	1e 15       	cp	r17, r14
    23dc:	10 f4       	brcc	.+4      	; 0x23e2 <vfprintf+0x32e>
    23de:	e1 1a       	sub	r14, r17
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <vfprintf+0x330>
    23e2:	ee 24       	eor	r14, r14
    23e4:	04 ff       	sbrs	r16, 4
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <vfprintf+0x352>
    23e8:	80 e3       	ldi	r24, 0x30	; 48
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	b3 01       	movw	r22, r6
    23ee:	0e 94 4d 12 	call	0x249a	; 0x249a <fputc>
    23f2:	02 ff       	sbrs	r16, 2
    23f4:	1d c0       	rjmp	.+58     	; 0x2430 <vfprintf+0x37c>
    23f6:	01 fd       	sbrc	r16, 1
    23f8:	03 c0       	rjmp	.+6      	; 0x2400 <vfprintf+0x34c>
    23fa:	88 e7       	ldi	r24, 0x78	; 120
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e c0       	rjmp	.+28     	; 0x241c <vfprintf+0x368>
    2400:	88 e5       	ldi	r24, 0x58	; 88
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0b c0       	rjmp	.+22     	; 0x241c <vfprintf+0x368>
    2406:	80 2f       	mov	r24, r16
    2408:	86 78       	andi	r24, 0x86	; 134
    240a:	91 f0       	breq	.+36     	; 0x2430 <vfprintf+0x37c>
    240c:	01 ff       	sbrs	r16, 1
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <vfprintf+0x360>
    2410:	8b e2       	ldi	r24, 0x2B	; 43
    2412:	01 c0       	rjmp	.+2      	; 0x2416 <vfprintf+0x362>
    2414:	80 e2       	ldi	r24, 0x20	; 32
    2416:	f7 fc       	sbrc	r15, 7
    2418:	8d e2       	ldi	r24, 0x2D	; 45
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	b3 01       	movw	r22, r6
    241e:	0e 94 4d 12 	call	0x249a	; 0x249a <fputc>
    2422:	06 c0       	rjmp	.+12     	; 0x2430 <vfprintf+0x37c>
    2424:	80 e3       	ldi	r24, 0x30	; 48
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	b3 01       	movw	r22, r6
    242a:	0e 94 4d 12 	call	0x249a	; 0x249a <fputc>
    242e:	9a 94       	dec	r9
    2430:	d9 14       	cp	r13, r9
    2432:	c0 f3       	brcs	.-16     	; 0x2424 <vfprintf+0x370>
    2434:	da 94       	dec	r13
    2436:	f1 01       	movw	r30, r2
    2438:	ed 0d       	add	r30, r13
    243a:	f1 1d       	adc	r31, r1
    243c:	80 81       	ld	r24, Z
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	b3 01       	movw	r22, r6
    2442:	0e 94 4d 12 	call	0x249a	; 0x249a <fputc>
    2446:	dd 20       	and	r13, r13
    2448:	a9 f7       	brne	.-22     	; 0x2434 <vfprintf+0x380>
    244a:	06 c0       	rjmp	.+12     	; 0x2458 <vfprintf+0x3a4>
    244c:	80 e2       	ldi	r24, 0x20	; 32
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	b3 01       	movw	r22, r6
    2452:	0e 94 4d 12 	call	0x249a	; 0x249a <fputc>
    2456:	ea 94       	dec	r14
    2458:	ee 20       	and	r14, r14
    245a:	c1 f7       	brne	.-16     	; 0x244c <vfprintf+0x398>
    245c:	43 ce       	rjmp	.-890    	; 0x20e4 <vfprintf+0x30>
    245e:	f3 01       	movw	r30, r6
    2460:	66 81       	ldd	r22, Z+6	; 0x06
    2462:	77 81       	ldd	r23, Z+7	; 0x07
    2464:	cb 01       	movw	r24, r22
    2466:	2b 96       	adiw	r28, 0x0b	; 11
    2468:	e2 e1       	ldi	r30, 0x12	; 18
    246a:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__>

0000246e <strnlen_P>:
    246e:	fc 01       	movw	r30, r24
    2470:	05 90       	lpm	r0, Z+
    2472:	61 50       	subi	r22, 0x01	; 1
    2474:	70 40       	sbci	r23, 0x00	; 0
    2476:	01 10       	cpse	r0, r1
    2478:	d8 f7       	brcc	.-10     	; 0x2470 <strnlen_P+0x2>
    247a:	80 95       	com	r24
    247c:	90 95       	com	r25
    247e:	8e 0f       	add	r24, r30
    2480:	9f 1f       	adc	r25, r31
    2482:	08 95       	ret

00002484 <strnlen>:
    2484:	fc 01       	movw	r30, r24
    2486:	61 50       	subi	r22, 0x01	; 1
    2488:	70 40       	sbci	r23, 0x00	; 0
    248a:	01 90       	ld	r0, Z+
    248c:	01 10       	cpse	r0, r1
    248e:	d8 f7       	brcc	.-10     	; 0x2486 <strnlen+0x2>
    2490:	80 95       	com	r24
    2492:	90 95       	com	r25
    2494:	8e 0f       	add	r24, r30
    2496:	9f 1f       	adc	r25, r31
    2498:	08 95       	ret

0000249a <fputc>:
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	8c 01       	movw	r16, r24
    24a4:	eb 01       	movw	r28, r22
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	81 ff       	sbrs	r24, 1
    24aa:	1b c0       	rjmp	.+54     	; 0x24e2 <fputc+0x48>
    24ac:	82 ff       	sbrs	r24, 2
    24ae:	0d c0       	rjmp	.+26     	; 0x24ca <fputc+0x30>
    24b0:	2e 81       	ldd	r18, Y+6	; 0x06
    24b2:	3f 81       	ldd	r19, Y+7	; 0x07
    24b4:	8c 81       	ldd	r24, Y+4	; 0x04
    24b6:	9d 81       	ldd	r25, Y+5	; 0x05
    24b8:	28 17       	cp	r18, r24
    24ba:	39 07       	cpc	r19, r25
    24bc:	64 f4       	brge	.+24     	; 0x24d6 <fputc+0x3c>
    24be:	e8 81       	ld	r30, Y
    24c0:	f9 81       	ldd	r31, Y+1	; 0x01
    24c2:	01 93       	st	Z+, r16
    24c4:	f9 83       	std	Y+1, r31	; 0x01
    24c6:	e8 83       	st	Y, r30
    24c8:	06 c0       	rjmp	.+12     	; 0x24d6 <fputc+0x3c>
    24ca:	e8 85       	ldd	r30, Y+8	; 0x08
    24cc:	f9 85       	ldd	r31, Y+9	; 0x09
    24ce:	80 2f       	mov	r24, r16
    24d0:	09 95       	icall
    24d2:	89 2b       	or	r24, r25
    24d4:	31 f4       	brne	.+12     	; 0x24e2 <fputc+0x48>
    24d6:	8e 81       	ldd	r24, Y+6	; 0x06
    24d8:	9f 81       	ldd	r25, Y+7	; 0x07
    24da:	01 96       	adiw	r24, 0x01	; 1
    24dc:	9f 83       	std	Y+7, r25	; 0x07
    24de:	8e 83       	std	Y+6, r24	; 0x06
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <fputc+0x4c>
    24e2:	0f ef       	ldi	r16, 0xFF	; 255
    24e4:	1f ef       	ldi	r17, 0xFF	; 255
    24e6:	c8 01       	movw	r24, r16
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	08 95       	ret

000024f2 <__ultoa_invert>:
    24f2:	fa 01       	movw	r30, r20
    24f4:	aa 27       	eor	r26, r26
    24f6:	28 30       	cpi	r18, 0x08	; 8
    24f8:	51 f1       	breq	.+84     	; 0x254e <__ultoa_invert+0x5c>
    24fa:	20 31       	cpi	r18, 0x10	; 16
    24fc:	81 f1       	breq	.+96     	; 0x255e <__ultoa_invert+0x6c>
    24fe:	e8 94       	clt
    2500:	6f 93       	push	r22
    2502:	6e 7f       	andi	r22, 0xFE	; 254
    2504:	6e 5f       	subi	r22, 0xFE	; 254
    2506:	7f 4f       	sbci	r23, 0xFF	; 255
    2508:	8f 4f       	sbci	r24, 0xFF	; 255
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	af 4f       	sbci	r26, 0xFF	; 255
    250e:	b1 e0       	ldi	r27, 0x01	; 1
    2510:	3e d0       	rcall	.+124    	; 0x258e <__ultoa_invert+0x9c>
    2512:	b4 e0       	ldi	r27, 0x04	; 4
    2514:	3c d0       	rcall	.+120    	; 0x258e <__ultoa_invert+0x9c>
    2516:	67 0f       	add	r22, r23
    2518:	78 1f       	adc	r23, r24
    251a:	89 1f       	adc	r24, r25
    251c:	9a 1f       	adc	r25, r26
    251e:	a1 1d       	adc	r26, r1
    2520:	68 0f       	add	r22, r24
    2522:	79 1f       	adc	r23, r25
    2524:	8a 1f       	adc	r24, r26
    2526:	91 1d       	adc	r25, r1
    2528:	a1 1d       	adc	r26, r1
    252a:	6a 0f       	add	r22, r26
    252c:	71 1d       	adc	r23, r1
    252e:	81 1d       	adc	r24, r1
    2530:	91 1d       	adc	r25, r1
    2532:	a1 1d       	adc	r26, r1
    2534:	20 d0       	rcall	.+64     	; 0x2576 <__ultoa_invert+0x84>
    2536:	09 f4       	brne	.+2      	; 0x253a <__ultoa_invert+0x48>
    2538:	68 94       	set
    253a:	3f 91       	pop	r19
    253c:	2a e0       	ldi	r18, 0x0A	; 10
    253e:	26 9f       	mul	r18, r22
    2540:	11 24       	eor	r1, r1
    2542:	30 19       	sub	r19, r0
    2544:	30 5d       	subi	r19, 0xD0	; 208
    2546:	31 93       	st	Z+, r19
    2548:	de f6       	brtc	.-74     	; 0x2500 <__ultoa_invert+0xe>
    254a:	cf 01       	movw	r24, r30
    254c:	08 95       	ret
    254e:	46 2f       	mov	r20, r22
    2550:	47 70       	andi	r20, 0x07	; 7
    2552:	40 5d       	subi	r20, 0xD0	; 208
    2554:	41 93       	st	Z+, r20
    2556:	b3 e0       	ldi	r27, 0x03	; 3
    2558:	0f d0       	rcall	.+30     	; 0x2578 <__ultoa_invert+0x86>
    255a:	c9 f7       	brne	.-14     	; 0x254e <__ultoa_invert+0x5c>
    255c:	f6 cf       	rjmp	.-20     	; 0x254a <__ultoa_invert+0x58>
    255e:	46 2f       	mov	r20, r22
    2560:	4f 70       	andi	r20, 0x0F	; 15
    2562:	40 5d       	subi	r20, 0xD0	; 208
    2564:	4a 33       	cpi	r20, 0x3A	; 58
    2566:	18 f0       	brcs	.+6      	; 0x256e <__ultoa_invert+0x7c>
    2568:	49 5d       	subi	r20, 0xD9	; 217
    256a:	31 fd       	sbrc	r19, 1
    256c:	40 52       	subi	r20, 0x20	; 32
    256e:	41 93       	st	Z+, r20
    2570:	02 d0       	rcall	.+4      	; 0x2576 <__ultoa_invert+0x84>
    2572:	a9 f7       	brne	.-22     	; 0x255e <__ultoa_invert+0x6c>
    2574:	ea cf       	rjmp	.-44     	; 0x254a <__ultoa_invert+0x58>
    2576:	b4 e0       	ldi	r27, 0x04	; 4
    2578:	a6 95       	lsr	r26
    257a:	97 95       	ror	r25
    257c:	87 95       	ror	r24
    257e:	77 95       	ror	r23
    2580:	67 95       	ror	r22
    2582:	ba 95       	dec	r27
    2584:	c9 f7       	brne	.-14     	; 0x2578 <__ultoa_invert+0x86>
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	61 05       	cpc	r22, r1
    258a:	71 05       	cpc	r23, r1
    258c:	08 95       	ret
    258e:	9b 01       	movw	r18, r22
    2590:	ac 01       	movw	r20, r24
    2592:	0a 2e       	mov	r0, r26
    2594:	06 94       	lsr	r0
    2596:	57 95       	ror	r21
    2598:	47 95       	ror	r20
    259a:	37 95       	ror	r19
    259c:	27 95       	ror	r18
    259e:	ba 95       	dec	r27
    25a0:	c9 f7       	brne	.-14     	; 0x2594 <__ultoa_invert+0xa2>
    25a2:	62 0f       	add	r22, r18
    25a4:	73 1f       	adc	r23, r19
    25a6:	84 1f       	adc	r24, r20
    25a8:	95 1f       	adc	r25, r21
    25aa:	a0 1d       	adc	r26, r0
    25ac:	08 95       	ret

000025ae <_exit>:
    25ae:	f8 94       	cli

000025b0 <__stop_program>:
    25b0:	ff cf       	rjmp	.-2      	; 0x25b0 <__stop_program>
